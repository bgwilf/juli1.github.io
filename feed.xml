<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julien Delange</title>
    <description>Harder, Better, Faster, Stronger</description>
    <link>http://julien.gunnm.org/</link>
    <atom:link href="http://julien.gunnm.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 08 Dec 2017 21:12:48 -0800</pubDate>
    <lastBuildDate>Fri, 08 Dec 2017 21:12:48 -0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Deploying a Flask Application with Docker on a Raspberry Pi</title>
        <description>&lt;p&gt;I have been very frustrated by actual messaging apps. To me, the best way to communicate is to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Relay_Chat&quot;&gt;Internet Relay Chat&lt;/a&gt;. It includes all the features I need: multi-channels, private conversation, administration, etc. Unfortunately, for many people, IRC is not user friendly enough or lack many kikoolol(tm) capabilities (such as emojis, which seems to be the ultimate feature for some people).&lt;/p&gt;

&lt;p&gt;I do not want to use over-killed solutions or have many applications that bother and interrupt me all the time. That was a motivation
to implement a very simple message board to exchange messages with friends. The application is very simple: we can have different users, each user can post message. Admins can change password or delete users.&lt;/p&gt;

&lt;p&gt;This is how it looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/flask-chat.png&quot; alt=&quot;Flask Chat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The application relies on the &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask framework&lt;/a&gt; and uses a SQLite database to store users/messages information.
If you want to use the application and play locally, check the github application page: &lt;a href=&quot;https://github.com/juli1/flask-chat&quot;&gt;https://github.com/juli1/flask-chat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article series explains how to deploy this Flask application on your own server using docker. You can also deploy the same container
in AWS, GCP or Azure. Your choice. I just choose my Raspberry Pi because this is a computer that I have at home, I have full control over it and there is an interesting challenge to host a docker image on such a small computer.&lt;/p&gt;

&lt;p&gt;This article will explain:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to checkout and try the application&lt;/li&gt;
  &lt;li&gt;How to build a docker container for it&lt;/li&gt;
  &lt;li&gt;How to run the docker container on your local machine&lt;/li&gt;
  &lt;li&gt;How to run the docker container on a raspberry pi&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-application&quot;&gt;The Application&lt;/h1&gt;
&lt;p&gt;I already wrote the application. This is a simple chat, you can check out the code there: &lt;a href=&quot;https://github.com/juli1/flask-chat&quot;&gt;https://github.com/juli1/flask-chat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even try it out locally:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/juli1/flask-chat.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;flask-chat
&lt;span class=&quot;c&quot;&gt;# Replace the following line with virtualenv if necessary&lt;/span&gt;
python3.X -m venv venv &lt;span class=&quot;c&quot;&gt;# Replace X with your version of python&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;flask/bin/activate
pip install -r requirements.txt
./run-debug.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, open your web-browser and go to &lt;a href=&quot;https://localhost:5000&quot;&gt;https://localhost:5000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also signed up to have continuous integration with &lt;a href=&quot;https://travis-ci.org/&quot;&gt;travis-ci&lt;/a&gt; and code coverage report from &lt;a href=&quot;https://coveralls.io/&quot;&gt;coveralls&lt;/a&gt;. Just because this is cute to have.&lt;/p&gt;

&lt;h1 id=&quot;building-the-docker-image&quot;&gt;Building the docker image&lt;/h1&gt;

&lt;p&gt;Now, we need to build a docker image to be able to deploy this everywhere.&lt;/p&gt;

&lt;p&gt;The first thing we need is to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; that defines how to build your container.&lt;/p&gt;

&lt;p&gt;In the following file, we perform the major following steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install all dependencies (&lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;python3-pip&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;copy our app in &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt; in the container&lt;/li&gt;
  &lt;li&gt;install all the python dependencies (specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;create a fresh database &lt;code class=&quot;highlighter-rouge&quot;&gt;db_create.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;specify the command to execute the application &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 run-production.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM python:3.6-slim-stretch
MAINTAINER Julien Delange &amp;lt;julien@gunnm.org&amp;gt;
RUN apt-get update -y
RUN apt-get install -y python3 python-pip-whl python3-pip
COPY . /app
WORKDIR /app
RUN pip3 install -r requirements.txt
RUN rm -f app.db
RUN python3 ./db_create.py
EXPOSE 5050
ENTRYPOINT [&quot;python3&quot;]
CMD [&quot;run-production.py&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once we are done, we can build the docker image. To do so, just invoke the following command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t flask-chat:latest .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;running-the-docker-image-on-your-local-machine-or-on-your-raspberry-pi&quot;&gt;Running the docker image on your local machine or on your raspberry pi&lt;/h1&gt;

&lt;p&gt;Now, it is time to run the docker image freshly built!&lt;/p&gt;

&lt;p&gt;If you want to run the image you built on your computer into a docker container, just run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 10000:10000 flask-chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command run the container and binds the local port 10000 to the container port 5050 (on which the flask application is listening to).&lt;/p&gt;

&lt;p&gt;If you just want to use the pre-built image from &lt;a href=&quot;https://hub.docker.com/r/juli1/flask-chat/tags/&quot;&gt;dockerhub&lt;/a&gt;
on your local machine, run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 10000:10000 juli1/flask-chat:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, if you want to run the pre-built image from &lt;a href=&quot;https://hub.docker.com/r/juli1/flask-chat/tags/&quot;&gt;dockerhub&lt;/a&gt;
on your raspberry pi, run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 10000:5050 juli1/flask-chat:rpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to actually build the container on your raspberry pi, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile.rpi&lt;/code&gt;`file
in the root directory of the project like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t flask-chat:latest . -f Dockerfile.rpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/h1&gt;
&lt;p&gt;We are in 2017 (soon 2018) and continuous deployment/integration is just the way to go. Automating
the build of your docker container is very easy - you can just &lt;a href=&quot;http://www.travis-ci.org&quot;&gt;travis-ci&lt;/a&gt; or &lt;a href=&quot;http://docker.com&quot;&gt;docker&lt;/a&gt;
do trigger every time there is a commit.&lt;/p&gt;

&lt;p&gt;What is more difficult is to build the image for raspberry pi. This &lt;a href=&quot;https://blog.hypriot.com/post/setup-simple-ci-pipeline-for-arm-images/&quot;&gt;tutorial&lt;/a&gt;
helped a lot. If you want to build your own docker image for raspberry pi, have a look at my 
&lt;a href=&quot;https://github.com/juli1/flask-chat/blob/master/Dockerfile.rpi&quot;&gt;the Dockerfile.rpi&lt;/a&gt; in the project github directory.&lt;/p&gt;

&lt;h1 id=&quot;useful-resources&quot;&gt;Useful resources&lt;/h1&gt;
&lt;p&gt;The chat application is available on my github account: &lt;a href=&quot;https://github.com/juli1/flask-chat&quot;&gt;https://github.com/juli1/flask-chat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The docker images are on this repository: &lt;a href=&quot;https://hub.docker.com/r/juli1/flask-chat/&quot;&gt;https://hub.docker.com/r/juli1/flask-chat/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The docker image for intel is: juli1/flask-chat:latest&lt;/li&gt;
  &lt;li&gt;The docker image for raspberry pi is: juli1/flask-chat:rpi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some resources I used during my search for information on rust.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;The Flask Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&quot;&gt;The Amazing Flask Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://containertutorials.com/docker-compose/flask-simple-app.html&quot;&gt;Docker container for Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 03 Dec 2017 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/flask/python/docker/raspberry-pi/2017/12/03/developing-deploying-with-docker-on-raspberry-pi/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/flask/python/docker/raspberry-pi/2017/12/03/developing-deploying-with-docker-on-raspberry-pi/</guid>
        
        <category>flask</category>
        
        <category>docker</category>
        
        <category>gcp</category>
        
        <category>azure</category>
        
        <category>aws</category>
        
        
        <category>flask</category>
        
        <category>python</category>
        
        <category>docker</category>
        
        <category>raspberry-pi</category>
        
      </item>
    
      <item>
        <title>Learning rust, implementing a webserver</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I wanted to learn &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;rust&lt;/a&gt; months ago. I remember
attending a talk in Pittsburgh several years ago about rust and I liked the idea
that instead of re-implementing the wheel, it tries to solve issues other new
languages never try to fix (or did it in an efficient/ineffective way).&lt;/p&gt;

&lt;p&gt;I spent some time over the last two weeks to learn the langage and complete a
project in rust: a webserver. Nothing really fancy, it was rather a way to learn
the language. I believe the best way to learn a new language is to complete few
new projects.&lt;/p&gt;

&lt;p&gt;This is the result: I am able to run a webserver that can host this blog, as
shown in the picture below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rust-webserver-browser.png&quot; alt=&quot;Blog running on rust webserver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is basically how to launch it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rust-webserver-term.png&quot; alt=&quot;Terminal with Cargo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will talk about this project and share some thoughts about
rust.&lt;/p&gt;

&lt;h1 id=&quot;a-web-server-in-rust&quot;&gt;A web server in rust&lt;/h1&gt;

&lt;h2 id=&quot;specifications&quot;&gt;Specifications&lt;/h2&gt;
&lt;p&gt;I wanted to implement a simple webserver in rust to understand/practice/use the
language. The goal was to be able to have a server able to show a static
website. This is an experiment and this should absolutely &lt;strong&gt;not be used in
production&lt;/strong&gt;. This project is useful if you are new to rust and/or want a
codebase about networking features in rust (such as using the
&lt;a href=&quot;https://docs.rs/mio&quot;&gt;mio&lt;/a&gt; or &lt;a href=&quot;https://doc.rust-lang.org/getopts&quot;&gt;getops&lt;/a&gt;
crates).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non goals&lt;/strong&gt;: full http support, large file handling, security (you can access
the full FS ).&lt;/p&gt;

&lt;h2 id=&quot;get-the-code-and-run-it&quot;&gt;Get the code and run it&lt;/h2&gt;
&lt;p&gt;The code is publicly available on github at:
&lt;a href=&quot;https://github.com/juli1/rust-webserver&quot;&gt;https://github.com/juli1/rust-webserver&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# git clone https://github.com/juli1/rust-webserver.git
# cd rust-webserver
# cargo build &amp;amp;&amp;amp; cargo run -- -p 9065 -l 127.0.0.1 --rootdir `pwd`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, open your browser and go to
&lt;a href=&quot;http://localhost:9065/Cargo.toml&quot;&gt;http://localhost:9065/Cargo.toml&lt;/a&gt;. You will
be able to see the file from the source directory.&lt;/p&gt;

&lt;h2 id=&quot;details-of-the-code&quot;&gt;Details of the code&lt;/h2&gt;

&lt;p&gt;The code is separated into four files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;server.rs&lt;/code&gt; is about all the server part to listen on the socket,
communication handling and so on.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client.rs&lt;/code&gt; is about handling request/reply for a particular connection.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;protocol.rs&lt;/code&gt; contains all the code with all the data structure related to the
requests and replies.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main.rs&lt;/code&gt; checks the options passed to the command line, create a server and
… nothing else!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code does not handles all HTTP headers. The server supports HTTP/1.0 only.
The parsing of command is very basic. The server supports basically two file
types: html, png and jpg. Yes, this is very basic but met my goal: it was an
awesome way to learn rust and I loved it!&lt;/p&gt;

&lt;h1 id=&quot;feedback-about-rust&quot;&gt;Feedback about rust&lt;/h1&gt;

&lt;p&gt;I really like rust. At first, the language brings a lot of frustration because of all the
restrictions and scope, borrow, etc. You really need to undertand these concepts
to make any progress. Once you pass the first hours digging online about the
errorr messages (that are pretty clear by the way), you realize how the language
help you to bring more assurance that your code is safe and free of errors. It
reminds me several aspects of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ada_(programming_language)&quot;&gt;Ada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rust is what we should be expecting for the next generation of language to do
low-level/system programming (program like webservers, file servers, etc.). It will probably not be
the language I will use if I design a web application. On the other hand, this
will probably be my choice if I need to do a web-server, file server or any
program and needs to be safe, reliable and performant.&lt;/p&gt;

&lt;h2 id=&quot;rust-pros&quot;&gt;Rust: pros&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Compiler error messages&lt;/strong&gt;: Debug messages are clean and useful. We are very far from C++ compilers that
produces a tons of useless error messages that hide the cause of the issue. When
starting in Rust, you will have a tons of compilation errors but error messages
will be easy to understand to fix your program and make progress.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: programs written in Rust seems fast. I did not benchmark but this
seems very promising.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Predictability&lt;/strong&gt;: rust reminds me Ada: it is painful to write your first
program because of all the language restrictions. However, once it compiles, it
generally works as expected. I had very few crashes during the development of
the webserver but I had a ton of error messages before it even starts working.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ownership&lt;/strong&gt; : the concept behind ownership is painful at first but after a
while, it is easy to understand how powerful it can be.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rust-cons&quot;&gt;Rust: cons&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Lifetime&lt;/strong&gt;: the idea behind &lt;a href=&quot;https://rustbyexample.com/scope/lifetime.html&quot;&gt;lifetime&lt;/a&gt;
is really powerful and useful. The language &lt;em&gt;needs&lt;/em&gt; have a way to annotate the
lifetime of objects/variables but the syntax is horrible and the whole mechanism
is ultra verbose.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;useful-resources&quot;&gt;Useful resources&lt;/h1&gt;
&lt;p&gt;These are some resources I used during my search for information on rust.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rustbyexample.com/&quot;&gt;Rust By Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.burntsushi.net/rust-error-handling/&quot;&gt;Error Handing in rust&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jmarshall.com/easy/http/&quot;&gt;HTTP made very easy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 18 Nov 2017 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/rust/2017/11/18/learning-rust-in-practice-webserver-in-rust/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/rust/2017/11/18/learning-rust-in-practice-webserver-in-rust/</guid>
        
        <category>rust</category>
        
        <category>webserver</category>
        
        
        <category>rust</category>
        
      </item>
    
      <item>
        <title>How to prepare for an interview at Amazon</title>
        <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I am currently a Senior SDE at Amazon Web Services (and &lt;a href=&quot;https://www.linkedin.com/in/juli1&quot;&gt;I am hiring&lt;/a&gt;, my team
is &lt;em&gt;awesome&lt;/em&gt;, please message me if you are interested). Opinions there are my own and does not represent the one from my
employer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com&quot;&gt;Amazon&lt;/a&gt; is a major tech company and 
is a leader in many domains, which gives a lot of jobs opportunities (like working on Cloud Computing via &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Amazon
Web Services&lt;/a&gt;, Retail via
&lt;a href=&quot;http://www.amazon.com&quot;&gt;Amazon.com&lt;/a&gt; or Virtual Assistant via
&lt;a href=&quot;http://alexa.amazon.com]&quot;&gt;Alexa&lt;/a&gt;. Thousands of people want to work there
and the interview is &lt;strong&gt;hard&lt;/strong&gt;.
This is very common to find people frustrated because they have been rejected,
like this on &lt;a href=&quot;http://www.quora.com&quot;&gt;Quora&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview-rejection.png&quot; alt=&quot;Interview Rejection Post on Quora&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The interview is hard and even if you &lt;em&gt;think&lt;/em&gt; you did great, you probably did not. 
&lt;strong&gt;Reality check&lt;/strong&gt;: this is really hard to get another perspective (see pic below). And unfortunately,
we probably do not perform as good as we think most of the time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rhino.jpg&quot; alt=&quot;Rhino&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a senior SDE working there, I wanted to share some advices on how to prepare
for your interview. These advices are mine and are limited to my knowledge and experience.
Do not consider them as the only good practices, these are just my perspective (see pic above).&lt;/p&gt;

&lt;h1 id=&quot;demystify-the-interview&quot;&gt;Demystify the interview&lt;/h1&gt;
&lt;p&gt;First of all, do not focus too much on the outcome on the interview. Hope and shoot for the best
but keep in mind it might not happen.&lt;/p&gt;

&lt;p&gt;Interviewing is like dating. You prepare, you try to be at your best and you will be
stressed. This shows that you care about the job. But if it does not work out, no worries, 
there are plenty of fish in the sea. But if it works, you do not have
to seal the deal right away: a company that is rejected by a candidate is likely to come back later.&lt;/p&gt;

&lt;p&gt;But first thing first, you &lt;strong&gt;have to be prepared&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;work-on-coding-know-your-basics&quot;&gt;Work on coding. Know your basics&lt;/h1&gt;
&lt;p&gt;The general advice, no matter the tech company is to know your basics:
algorithms, data structure, complexity, you &lt;strong&gt;have to know&lt;/strong&gt; these topics.
If you do not know, do not even go and try, you will waste your time.&lt;/p&gt;

&lt;p&gt;I would advice to read at list two books:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://elementsofprogramminginterviews.com/&quot;&gt;Elements of Programming Interviews&lt;/a&gt;: the most complete
 resource to be prepared for algorithmic, design and other technical aspects&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the Code Interview&lt;/a&gt;: a
 good second book that explains also what to expect during the interview.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you think you already know your basics and you do not need this, think twice.
Reading &lt;em&gt;Elements of Programming Interviews&lt;/em&gt; will definitively refresh your skills.&lt;/p&gt;

&lt;p&gt;You can also go for a mock interview, a coding bootcamp. Whatever. Be ready to write
code on whiteboard and answer to some basic questions.&lt;/p&gt;

&lt;h1 id=&quot;know-the-leadership-principles-&quot;&gt;Know the leadership principles …&lt;/h1&gt;
&lt;p&gt;Technical (coding/system design) skills constitute 100% of a hiring decision. The other 100% is guided
by the leadership principles. The ratio might be be accurate (no kidding!), but what I want to highlight there
is that most books and advices do not dive deep on this topic while this is very important. Knowing
the leadership principles shows your culture fit and your understanding of the company principles. If you do not know them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Right.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.jobs/principles&quot;&gt;https://www.amazon.jobs/principles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn and show you understand them. Connect your own experience with these principles.
Explain how you apply &lt;em&gt;customer obsession&lt;/em&gt;, &lt;em&gt;frugality&lt;/em&gt;, &lt;em&gt;bias for action&lt;/em&gt; or &lt;em&gt;learn and be curious&lt;/em&gt; in your
actual job. Doing this will prepare you for your interview.&lt;/p&gt;

&lt;p&gt;This is an important part of an interview because these principles
drive our work every day in the company. &lt;strong&gt;Showing that you
understand and follow these principles is key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, do not make up stories, &lt;strong&gt;be sincere, real&lt;/strong&gt;. If you do not know something, say it
and ask for more clarifications or to have another question to evaluate you. This is very easy for an interviewer
to see when somebody is making up a story.&lt;/p&gt;

&lt;h2 id=&quot;-and-do-basic-search-about-the-company&quot;&gt;… and do basic search about the company&lt;/h2&gt;

&lt;p&gt;Learn about the job and do some research about the division you are interviewing for (lab126, AWS, etc.).
Know the products they are developing. This will show you are interested about the job and you care about it.
Do not overdo it, just know the basic information: products, target, overall development plan, major leaders, etc.&lt;/p&gt;

&lt;h1 id=&quot;practice-a-lot&quot;&gt;Practice a lot&lt;/h1&gt;

&lt;p&gt;Practice, every day. Start with practicing on &lt;a href=&quot;http://www.leetcode.com&quot;&gt;leetcode&lt;/a&gt;, &lt;a href=&quot;http://www.geeksforgeeks.org/&quot;&gt;geeksforgeeks&lt;/a&gt; or any other
online coding site. Solve at least 4 problems a day (for example, 2 in the
morning, 2 in the evening). Make sure you solved at least 4 to 5 problems in
every category (arrays, tree, linked-list, etc.) before scheduling any interview
(even a mock).&lt;/p&gt;

&lt;p&gt;Buy a &lt;a href=&quot;https://www.amazon.com/Lifetree-Stick-Message-Sticker-78-7-Inch/dp/B015O5QOY6/ref=sr_1_3?ie=UTF8&amp;amp;qid=1500784523&amp;amp;sr=8-3&amp;amp;keywords=whiteboard+sticker&quot;&gt;whiteboard&lt;/a&gt;.
It costs nothing (~$10) and will help you to practice in real conditions.&lt;/p&gt;

&lt;p&gt;Do not bother having a coach. This is non-sense, a waste of time and money.
Just work hard, every day for several weeks in a row. Stop coding on your
computer and switch to the whiteboard exclusively.&lt;/p&gt;

&lt;h1 id=&quot;go-out-and-interview-periodically&quot;&gt;Go out and interview periodically&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Interviewing is like a muscle&lt;/strong&gt;: you need to practice so that you do not loose your
ability to interview. Even if you are at your dream job today, continue
to practice to keep it strong. This is very important to keep this ability up and
running. You can do that in different ways: you can either practice with a
friend or just apply to positions to evaluate yourself.&lt;/p&gt;

&lt;p&gt;Remember, interviewing is like dating, you can go interview but &lt;em&gt;do not have
to&lt;/em&gt; accept any offer. If you refuse, the other party will contact
you later to check what you are up to. And even if you refuse it, 
having a nice offer will boost your ego and give your value
on the market (always good to take!).&lt;/p&gt;

&lt;h1 id=&quot;same-player-try-again&quot;&gt;Same player, try again&lt;/h1&gt;

&lt;p&gt;Even if you prepare at your best, there is still a chance you will not be
selected. There are many reasons a candidate will not receive an offer. Your
goal is to be prepared at best to reduce the probably of being rejected.
But it can happen for various reasons. &lt;strong&gt;And that is ok&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Do not take this personal. Consider this as a learning opportunity to
improve and re-apply few months after. After few days, you will know where you
probably made a mistake and can work on improving. The process is generally
oriented towards false positive, this is why recruiters will probably re-contact
after a few months to re-apply.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Jul 2017 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/amazon/techjob/interview/2017/07/21/how-to-prepare-for-an-interview-at-amazon/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/amazon/techjob/interview/2017/07/21/how-to-prepare-for-an-interview-at-amazon/</guid>
        
        <category>amazon</category>
        
        <category>interview</category>
        
        
        <category>amazon</category>
        
        <category>techjob</category>
        
        <category>interview</category>
        
      </item>
    
      <item>
        <title>AADL In Practice is OUT!</title>
        <description>&lt;p&gt;After more than 4 months of intense work, I am happy to announce that my first book, &lt;em&gt;AADL In Practice&lt;/em&gt;
is now available online! The book is a guide to walk you through the AADL language, explains its syntax
and semantics and helps you to extend it for your own needs. All of this for $4.99.&lt;/p&gt;

&lt;p&gt;This is a nice way to give back to the AADL community and close a chapter of the research work I started
almost 10 years ago. I wanted to make my research work available. Not having these expensives books about
complicated stuff. I wanted to do something simple, quick. Something most of engineers can understand
and reuse for their own needs. I hope this will be useful for the software engineering community.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/dp/B071WHRJY3&quot;&gt;Amazon e-book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.aadl-book.com&quot;&gt;Book website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/aadlinpractice/&quot;&gt;Like the book on facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/dp/B071WHRJY3&quot;&gt;&lt;img src=&quot;/assets/aadl-book-3d.jpg&quot; alt=&quot;AADL In Practice&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 03 Jun 2017 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/architecture/modeling/2017/06/03/aadl-book/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/architecture/modeling/2017/06/03/aadl-book/</guid>
        
        <category>aadl</category>
        
        <category>modeling</category>
        
        
        <category>architecture</category>
        
        <category>modeling</category>
        
      </item>
    
      <item>
        <title>Why using asynchronous communications?</title>
        <description>&lt;p&gt;&lt;strong&gt;TL;DR: this blog post explains the status of async communications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It all started when I watched a video online:
&lt;a href=&quot;https://www.youtube.com/watch?v=gaOa-Dsbb4o&quot;&gt;Scaling Server Software at Facebook&lt;/a&gt;. The video
gives interesting details used at facebook to optimize their systems. One of the big advice (among many others)
is to use asynchronous communications. I wanted see the benefit of using
asynchronous communication and how it compares with the traditional synchronous model.&lt;/p&gt;

&lt;p&gt;This blog post explains first the different between synchronuous and asynchronuous I/O,
presents the programming models and gives some rough estimates of what you can expect.
If you develop a massive ditributed system, you cannot avoid asynchronuous communications.&lt;/p&gt;

&lt;h1 id=&quot;synchronous-vs-asynchronous-io&quot;&gt;Synchronous vs. asynchronous I/O&lt;/h1&gt;

&lt;p&gt;Let’s first start by explaining what is the difference between synchronous and asynchronuous
communications. A distributed application communicate by performing I/Os (Input/Output). It can
be network communications (socket), reading/writing into a file, etc.
In the &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix&quot;&gt;UNIX&lt;/a&gt;/
&lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX&quot;&gt;POSIX&lt;/a&gt; world, I/O are performed
on file descriptors (FDs): when you open a file or a network communication,
you open a file descriptor and can then perform &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; operations on it.&lt;/p&gt;

&lt;p&gt;You have two ways to perform I/Os: &lt;strong&gt;synchronously&lt;/strong&gt; and &lt;strong&gt;asynchronously&lt;/strong&gt;. When using
&lt;strong&gt;synchronous&lt;/strong&gt; I/O, the caller is block until the call succeeds. When using &lt;strong&gt;asynchronuous&lt;/strong&gt;, you
are periodically checking if there is anything received. The next sections details these two worlds.&lt;/p&gt;

&lt;h2 id=&quot;the-synchronous-world&quot;&gt;The synchronous world&lt;/h2&gt;

&lt;p&gt;In the synchronous world, you wait for a reply. For example, if you call &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; on a network socket,
your current program will wait until some data is available.&lt;/p&gt;

&lt;p&gt;This communication pattern is very similar to a phone conversation: you talk first and then, wait for
a reply from the other side.&lt;/p&gt;

&lt;p&gt;Synchronous communication are very sequential. Most of the time, you perform a
series of operations as follow:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Open the communication channel (e.g. take your phone and dial your friend)&lt;/li&gt;
  &lt;li&gt;Do several exchanges (e.g. each person talks and wait for the answer of the other person)&lt;/li&gt;
  &lt;li&gt;Close the communication channel (hangup)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This model is fine when you have one communication happenning. The problem is when your application
is massively distributed and communicate with a lot of peers. In that case, you need
to have N tasks (also called &lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX_Threads&quot;&gt;threads&lt;/a&gt;) and each one
will take care of communicating with one peer.&lt;/p&gt;

&lt;p&gt;The following pseudo-code shows a very common way to implement such a system: create a threads for
each request and let it handle one communication.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wait_for_reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process_reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NREQUESTS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create_thread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NREQUESTS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wait_for_thread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The execution diagram is as follow: the main thread creates one thread for each communication patterns
and wait that all of them finish their work. In that model, the operating system schedules the threads and activates them
when the data is available, adding more data structure into the kernel.&lt;/p&gt;

&lt;p&gt;One can note that after sending the request, a thread is waiting for the reply, doing nothing but waiting
for incoming communication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/communication-threads.png&quot; alt=&quot;Communication with threads&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-asynchronous-world&quot;&gt;The asynchronous world&lt;/h2&gt;

&lt;p&gt;In the asynchronous world, the program &lt;strong&gt;post&lt;/strong&gt; operations and check the result later.
This communication model is similar to text messages: you send a text but does not wait for an immediate
return, the reply may arrive now or hours later. The key here: you do not have to stay on the line
and wait for a reply, you can check it later.&lt;/p&gt;

&lt;p&gt;Asynchronous communication are not sequential at all. In fact, you send
some information (text messages) and then, there is a main loop
that receives replies and write back according to a protocol.&lt;/p&gt;

&lt;p&gt;There is no need for additional task in that model, you can handle all
of them in the main task. The hard part is to follow the status of
each operation.&lt;/p&gt;

&lt;p&gt;The following pseudo-code shows a common approach to do asynchronuous
communication. The most important aspect of the main loop that handles
new events.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTHREADS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NREQUESTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_for_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The following diagram shows an execution trace of asynchronuous communication.
There is no new task, the main tasks posts all operations to do
in the beginning and check their status. Once all operations returned, the program
is complete. Note that replies are not coming back in a specific order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/communication-nothread.png&quot; alt=&quot;Communication with threads&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-using-asynchronous-communications&quot;&gt;Why using asynchronous communications?&lt;/h1&gt;

&lt;p&gt;There are two majors issues with synchronous communication:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Lot of time of threads consists of waiting for I/O completion. It is a waste of resources&lt;/li&gt;
  &lt;li&gt;It introduces overhead, especially in the kernel for managing/scheduling/dispatching resources.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By using asynchronuous communication, you just avoid resources waste and then, can
process more requests with the same hardware. If your system is massively distributed, 
and handles thousands of simultaneous connections it will
either (1) saves resources or (2) process more requests.&lt;/p&gt;

&lt;p&gt;If you are not convinced, I suggest watching
the video &lt;a href=&quot;https://www.youtube.com/watch?v=gaOa-Dsbb4o&quot;&gt;Scaling Server Software at Facebook&lt;/a&gt;, 
a simple 5% of memory or processor usage reduction means savings in the scale of thousands
or millions of dollars. There are more information about asynchronous communication 
use at facebook on &lt;a href=&quot;https://code.facebook.com/posts/1661982097368498&quot;&gt;their blog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To summarize, using synchronous programming is easily and straightforward
but does not scale for massively large, distributed system. Asynchronous
programming makes your progrma more complex but avoid bottlenecks and resources
overhead.&lt;/p&gt;

&lt;h1 id=&quot;comparing-sync-and-async-performance&quot;&gt;Comparing sync and async performance&lt;/h1&gt;

&lt;p&gt;In order to evaluate the performance difference between synchronous and asynchronous
communications, I wrote a small client program that starts N connections
to a server and print the result. Basically, the program initiates a fixed number (N) of HTTP connections
to a web server, get a page and prints it on the standard output. I wrote two variants of the program:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Synchronous&lt;/strong&gt;: each connection is using a thread that opens a socket, write the request and print the result. There are then N threads, N being the number of connections.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;: the main program opens N sockets and handle them in a main control loop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to verify that each program retrieves the same thing (e.g. they return the same output), I log the output in a file and compares the file with diff.
Results were the same.&lt;/p&gt;

&lt;p&gt;I ran the tests on the following configuration&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Linux kernel 4.9&lt;/li&gt;
  &lt;li&gt;CPU Intel(R) Core(TM) i5-3320M CPU @ 2.60GHz&lt;/li&gt;
  &lt;li&gt;8GB RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, to remove the variability factor of the latency, all requests are issued to a local host.
I started by just running the program and vary the number of connections issued to see 
I then varied the number of concurrent connections between 1 and 100 and capture the system time used.
The system time is the time spent in kernel mode. It is clear that when using threads, there is an overhead
of resources management for the kernel.&lt;/p&gt;

&lt;p&gt;The following picture show the time spent in kernel mode for each version of the program (X=#connections and Y=time spent in kernel mode).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/async-evaluation-results.png&quot; alt=&quot;Time spent in kernel mode (X=#connections ; Y=time in kernel mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These results are very limited - this is done on a single host that communicates with only another machine without additional load.
One can expect more impact when using threads, especially when using locks/mutexes with more load.&lt;/p&gt;

&lt;h1 id=&quot;a-note-on-posix-async&quot;&gt;A note on POSIX async&lt;/h1&gt;
&lt;p&gt;When starting this work, I was looking for &lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX&quot;&gt;POSIX&lt;/a&gt; functions to perform async communications.
As POSIX is the reference for programming on UNIX system, this was natural to look how it handles
asynchronuous communications. Unfortunately, the asynchronuous API is a real disaster, in terms of its
definition (for example, it uses threads or signals to handle incoming data - something to just avoid)
or implementation (done in userland in Linux, which leads to poor performance).&lt;/p&gt;

&lt;p&gt;Other people &lt;a href=&quot;http://davmac.org/davpage/linux/async-io.html&quot;&gt;also reported&lt;/a&gt; also discusses this.
I have no idea why the current POSIX async API is so bad and why they published such a useless framework: the
notification mechanism (signals or threads) is inefficient, counter-productive and counter-intuitive.
I have no idea what the POSIX committee members were smoking the day they approved this.&lt;/p&gt;

&lt;p&gt;The result is that today, each UNIX has now its own implementation of asynchronous communication management
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Epoll&quot;&gt;epoll for linux&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Kqueue&quot;&gt;kqueue for BSD&lt;/a&gt;
leaving developers with no option than developing non-portable code.&lt;/p&gt;

&lt;h1 id=&quot;where-you-go-from-there&quot;&gt;Where you go from there?&lt;/h1&gt;
&lt;p&gt;No question about it, asynchronous communications are definitively the way
to go if you are developing a massive distributed system.&lt;/p&gt;

&lt;p&gt;So how to use asynchronous communication effectively with your favorite programming language?
There are multiple frameworks available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For C++, &lt;a href=&quot;http://www.boost.org/&quot;&gt;boost&lt;/a&gt; includes asynchronous communication functions&lt;/li&gt;
  &lt;li&gt;For Python &amp;gt;3.4, the &lt;a href=&quot;https://docs.python.org/3/library/asyncio.html#module-asyncio&quot;&gt;asyncio&lt;/a&gt; framework
provides everything you need to manage asynchronous communication&lt;/li&gt;
  &lt;li&gt;For Python &amp;lt;3.4, you have existing framework as detailed in &lt;a href=&quot;https://thehackerguidetopython.com/&quot;&gt;The Hacker’s guide to Python&lt;/a&gt; - you can also learn more in this &lt;a href=&quot;https://www.youtube.com/watch?v=7sCu4gEjH5I&quot;&gt;youtube video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For pure C on linux, use directly &lt;a href=&quot;https://en.wikipedia.org/wiki/Epoll&quot;&gt;epoll&lt;/a&gt;. This is not portable to any other UNIX but I bet you might not migrate to any other system now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code used for evaluate sync/async performance is &lt;a href=&quot;https://github.com/juli1/async-study&quot;&gt;available online&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Apr 2017 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/programming/linux/2017/04/15/comparison-sync-vs-async/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/programming/linux/2017/04/15/comparison-sync-vs-async/</guid>
        
        <category>epoll</category>
        
        <category>linux</category>
        
        <category>sync</category>
        
        <category>async</category>
        
        
        <category>programming</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Goodbye CMU-SEI, welcome Amazon!</title>
        <description>&lt;p&gt;I was definitively not planning to move away from Pittsburgh but I am now
leaving the &lt;a href=&quot;http://sei.cmu.edu&quot;&gt;Carnegie Mellon Software Engineering Institute&lt;/a&gt; to join the &lt;a href=&quot;http://aws.amazon.com&quot;&gt;AWS&lt;/a&gt; team
in Seattle. In case you never heard of it, &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Amazon Web Services&lt;/a&gt; is the leader 
of cloud-computing services and is used by many companies all over the world. You can read
more on &lt;a href=&quot;https://en.wikipedia.org/wiki/Amazon_Web_Services&quot;&gt;wikipedia there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pittsburgh has been the city where my American journey started. It has been exciting to work at CMU-SEI and I 
met a lot of wonderful people in the city. I am really happy and excited to
start a new chapter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay Hungry!&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 06 Jan 2017 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/geek/amazon/seattle/pittsburgh/2017/01/06/goodbye-cmu-sei-hello-amazon/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/geek/amazon/seattle/pittsburgh/2017/01/06/goodbye-cmu-sei-hello-amazon/</guid>
        
        <category>Amazon</category>
        
        <category>CMU-SEI</category>
        
        <category>Software Engineering Institute</category>
        
        
        <category>geek</category>
        
        <category>amazon</category>
        
        <category>Seattle</category>
        
        <category>Pittsburgh</category>
        
      </item>
    
      <item>
        <title>Flaskyelp, a simple yelp-like website with Python and Flask</title>
        <description>&lt;p&gt;This blog post details the design of a small yelp-like application in Python with Flask.&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;Some years ago, while working at the &lt;a href=&quot;http://www.esa.int&quot;&gt;European Space Agency&lt;/a&gt;, I learned Python and decided to developed some code, mostly for the &lt;a href=&quot;http://taste.tuxfamily.org/&quot;&gt;TASTE project&lt;/a&gt;. Back then, I was pretty familiar with the language, the main thing was to get used to a strict indentation code, which took just few hours. Coding mostly in Java for the &lt;a href=&quot;https://github.com/osate/&quot;&gt;OSATE modeling platform&lt;/a&gt; since 2012, I decided to refresh my Python skills.&lt;/p&gt;

&lt;p&gt;The first idea I had then was to code a small website with Python. First, I read again &lt;a href=&quot;https://thehackerguidetopython.com/&quot;&gt;The Hacker’s Guide to Python&lt;/a&gt;, a book from an old friend, &lt;a href=&quot;https://julien.danjou.info/&quot;&gt;Julien Danjou&lt;/a&gt;, which contains a lot of hacks and tricks for Python.. The second action was to ask him what was a good active framework - as he was more familiar with the Python eco-system, he probably knows better what are the code framework to use. I would then be able to start right away my small website project. He recommended &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt;, a popular Python micro-framework.&lt;/p&gt;

&lt;h1 id=&quot;introducing-flaskyelp-a-small-yelp-in-python&quot;&gt;Introducing Flaskyelp, a small yelp in Python&lt;/h1&gt;
&lt;p&gt;I decided to code a small &lt;a href=&quot;http://yelp.com&quot;&gt;Yelp&lt;/a&gt;-clone. Nothing fancy, it will be very simple to design: a basic Flask application, no CSS or fancy front-end, no complex model or interaction with &lt;a href=&quot;https://github.com/osate/&quot;&gt;SQLAlchemy&lt;/a&gt;, just a minimalistic design and a sqlite database. The emphasis was to refresh my python skills and be familiar again with the environment (build system, testing infrastructure, etc.)!&lt;/p&gt;

&lt;p&gt;Also, I wanted to share it so that people in a similar situation can get the sources and potentially learn from it. I put the sources &lt;a href=&quot;https://github.com/juli1/flaskyelp&quot;&gt;on github&lt;/a&gt;, which can help you in case you want to start using Flask. It is in fact very easy to use and install. I will go through the basic steps.&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;
&lt;p&gt;You need a working python environment. The tool depend on &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt;, so, you need to install it. Otherwise, you can use a virtual environment to install all the dependencies. There is the set of commands that would get you started:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/juli1/flaskyelp.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;flaskyelp
virtualenv venv
. ./venv/bin/activate
pip install flask
python -m flask initdb
python -m flask run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;During this sequence of commands, you checkout the project, install the virtual environment, activate it, install the dependency, initialize the database and run the program.&lt;/p&gt;

&lt;p&gt;Once the program is running, you can see the result in a browser by going on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/&lt;/code&gt;. You should have something similar as below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/flaskyelp.png&quot; alt=&quot;flaskyelp&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;test-it&quot;&gt;Test it!&lt;/h2&gt;

&lt;p&gt;I always try to implement test cases for my code, it is essential to make sure you do not break any functionality when you are modifying your code or even trying to implement a new feature! That’s why I wrote some tests to check that the system is behaving as expected! I did not implement a full test-suite but simple test case that checks basic behavior.&lt;/p&gt;

&lt;p&gt;In order to test the application, you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;python setup.py test&lt;/code&gt; to run them.&lt;/p&gt;

&lt;p&gt;You should expect a trace like this.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;....
Using /home/julien/git/flaskyelp/.eggs/py-1.4.31-py2.7.egg
running egg_info
writing requirements to flaskyelp.egg-info/requires.txt
writing flaskyelp.egg-info/PKG-INFO
writing top-level names to flaskyelp.egg-info/top_level.txt
writing dependency_links to flaskyelp.egg-info/dependency_links.txt
reading manifest file &lt;span class=&quot;s1&quot;&gt;&#39;flaskyelp.egg-info/SOURCES.txt&#39;&lt;/span&gt;
reading manifest template &lt;span class=&quot;s1&quot;&gt;&#39;MANIFEST.in&#39;&lt;/span&gt;
writing manifest file &lt;span class=&quot;s1&quot;&gt;&#39;flaskyelp.egg-info/SOURCES.txt&#39;&lt;/span&gt;
running build_ext
&lt;span class=&quot;o&quot;&gt;=======================================================&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;session starts &lt;span class=&quot;o&quot;&gt;=======================================================&lt;/span&gt;
platform linux2 -- Python 2.7.12+, pytest-3.0.3, py-1.4.31, pluggy-0.4.0
rootdir: /home/julien/git/flaskyelp, inifile:
collected 7 items

tests/test_flaskyelp.py .......

&lt;span class=&quot;o&quot;&gt;====================================================&lt;/span&gt; 7 passed &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.22 seconds &lt;span class=&quot;o&quot;&gt;=====================================================&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;julien@akira]/home/julien/git/flaskyelp#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h1&gt;

&lt;p&gt;I really enjoy learning Python. The language is well-documented, which makes it easier to learn and use. The next project is to implement a bot for the &lt;a href=&quot;http://www.slack.com&quot;&gt;slack collaboration platform&lt;/a&gt;. I expect to be done during the next two weeks. As usual, I will post the code there.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/juli1/flaskyelp&quot;&gt;Flaskyelp on github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thehackerguidetopython.com/&quot;&gt;The Hacker’s Guide to Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Oct 2016 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/geek/python/2016/10/01/flaskyelp-a-small-yelp-in-flask-with-python/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/geek/python/2016/10/01/flaskyelp-a-small-yelp-in-flask-with-python/</guid>
        
        <category>Python</category>
        
        <category>Flask</category>
        
        <category>Yelp</category>
        
        
        <category>geek</category>
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Simplify your OSATE and AADL analysis code with Java 8 lambda</title>
        <description>&lt;p&gt;If you already wrote analysis code inside &lt;a href=&quot;http://www.osate.org&quot;&gt;OSATE&lt;/a&gt;, you probably know that when writing an analysis plug-in, filtering components (according to their type, property, etc) can be painful. It can introduce a lot of useless code that browse the model to find the component of interest. The code used to browse the model is long and add a lot of &lt;strong&gt;noise&lt;/strong&gt;, making the review difficult.&lt;/p&gt;

&lt;p&gt;Over the last months, I started to use the &lt;a href=&quot;http://www.eclipse.org/xtend/&quot;&gt;xtend&lt;/a&gt; language for writing my analysis plugin. It was a way to simplify my code and learn a new language. When I started to read about Java 8, I was excited to use the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;lambda expression mechanism&lt;/a&gt;. And realized that it can be leveraged to simplify the design of my AADL plugins.&lt;/p&gt;

&lt;p&gt;Bottom line: it remove a lot of &lt;strong&gt;noisy&lt;/strong&gt; code to only focus on what is really important. It makes the code more understandable and easy to read.&lt;/p&gt;

&lt;p&gt;I will illustrate that with an example. In this example, I get all data components that have the &lt;code class=&quot;highlighter-rouge&quot;&gt;Data_Size&lt;/code&gt; property set to 0. The difference between a standard, recursive implementation and the lambda-expression is simple: about 20 lines of code vs 3 lines of code.&lt;/p&gt;

&lt;p&gt;The imperative version looks like this (see below): you have to browse the component hierarchy and check the component category and &lt;code class=&quot;highlighter-rouge&quot;&gt;Data_Size&lt;/code&gt; value. Really, what you care in this code is the condition that filter the component. All the rest is noise, not useful but can still introduce a lot of bugs.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findComponentRecursive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentInstance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentInstance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponentInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComponentCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDataSizeInBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findComponentRecursive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SystemInstance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findComponentRecursive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s now have a look at the same implementation but with the lambda expression. What you really have is a method that filters the components using a predicate. Simple. Easy to read. Efficient.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SystemInstance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAllComponentInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComponentCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDataSizeInBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I am still reading code examples about Java 8 and using lambda. I am convinced it can help a lot to write better code, increase productivity and reduce bugs. If you are writing analysis plugins for AADL, I would definitively recommend to at list &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;have a look at the tutorial&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Jul 2016 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/geek/osate/aadl/2016/07/31/java-lambda-osate-plugins/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/geek/osate/aadl/2016/07/31/java-lambda-osate-plugins/</guid>
        
        <category>AADL</category>
        
        <category>OSATE</category>
        
        <category>java lambda</category>
        
        
        <category>geek</category>
        
        <category>osate</category>
        
        <category>aadl</category>
        
      </item>
    
      <item>
        <title>Supporting the UART1 of the BeagleBone Black with seL4/CAmkES</title>
        <description>&lt;h1 id=&quot;in-a-nutshell&quot;&gt;In a nutshell&lt;/h1&gt;

&lt;p&gt;In this article, I explain how to support UART1 of the &lt;a href=&quot;http://beagleboard.org/black&quot;&gt;Beaglebone Black&lt;/a&gt; with seL4 and the CAmkES component approach. I explain how to test the UART1, build a cable, patch the kernel and make your application.&lt;/p&gt;

&lt;h1 id=&quot;building-your-cable&quot;&gt;Building your cable&lt;/h1&gt;

&lt;p&gt;First, you need a cable to connect to the UART1. I (well, the folks at work helped me to get one!) used &lt;a href=&quot;https://www.adafruit.com/products/954&quot;&gt;this USB to TTL serial cable from Adafruit&lt;/a&gt;, which worked fine. The white PIN is connected to PIN 24 on the P9 connector board and the green cable is connected to PIN 26 on the P9 connector board.&lt;/p&gt;

&lt;p&gt;The picture is ugly but this is how it looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/beaglebone-uart1.jpg&quot; alt=&quot;Beaglebone with UART1 cable&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;testing-the-uart1-interface-with-debian&quot;&gt;Testing the UART1 interface with Debian&lt;/h1&gt;

&lt;p&gt;You can use the UART1 interface with the pre-installed debian on the Beaglebone. It already supports UART1 operation. What you need to do is to build a cable, connect on the debian and send some stuff on the port.&lt;/p&gt;

&lt;p&gt;The Beaglebone supports what we call a Device Tree Overlay. Long story short, this is a way to change the usage of each PIN. You then have to use the appropriate overlay to use the UART1. The default settings do not work, and you have to issue the following command to enable UART1.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo ADAFRUIT-UART1 &amp;gt; /sys/devices/bone_capemgr.*/slots
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, you can connect on the serial and issue whatever you want. Let’s say the UART1 of the Beaglebone Black is connected to /dev/ttyUSB1, you can then connected on screen and type anything.&lt;/p&gt;

&lt;p&gt;On your computer, run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;screen  /dev/ttyO1 115200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the Beaglebone Black, run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;screen /dev/ttyUSB1 115200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Type stuff on both screen, you should see what is sent/received.&lt;/p&gt;

&lt;p&gt;If it does not work, check your cables and/or the commands you invoked. Let’s move on.&lt;/p&gt;

&lt;h1 id=&quot;implementing-the-kernel-side&quot;&gt;Implementing the kernel side&lt;/h1&gt;

&lt;p&gt;First, checkout the seL4 and CAmkES repository. When you import the kernel, some stuff are not supported. For example, the UART1 is not declared. You then need to add the definition of UART1 in the kernel.&lt;/p&gt;

&lt;p&gt;Edit the file &lt;em&gt;kernel/include/plat/am335x/plat/machine/devices.h&lt;/em&gt; and add the following line.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define UART1_PADDR     0x48022000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, in &lt;em&gt;kernel/src/plat/am335x/machine/hardware.c&lt;/em&gt; you need to add the support for all UARTs. I found &lt;a href=&quot;https://e2e.ti.com/support/embedded/starterware/f/790/t/214547&quot;&gt;online a nice piece of code&lt;/a&gt; that configures all UARTs. I imported it directly into the kernel. You can see the code in &lt;a href=&quot;/assets/sel4-kernel-uart1bb.diff&quot;&gt;my patch&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;implementing-the-component&quot;&gt;Implementing the component&lt;/h1&gt;

&lt;p&gt;So now, the kernel has the information about the UART1 device (&lt;em&gt;UART1_PADDR&lt;/em&gt;) and activate the necessary resources to handle it. Now, we need to describe the component using CAmkES and implement its driver in the user-space partition.&lt;/p&gt;

&lt;h2 id=&quot;camkes-definition&quot;&gt;CAmkES definition&lt;/h2&gt;

&lt;p&gt;We define a hardware CAmkES component that represents the UART component and we connect it to the device that is supposed to handle/manage it.&lt;/p&gt;

&lt;p&gt;My assembly look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import &amp;lt;std_connector.camkes&amp;gt;;
import &quot;components/timer/Timer.camkes&quot;;
import &quot;components/ProducerThreadImpl/ProducerThreadImpl.camkes&quot;;
import &quot;components/ConsumerThreadImpl/ConsumerThreadImpl.camkes&quot;;

component UART{
  hardware;
  dataport Buf mem;
}

component ConsumerThreadImpl
{
  include &quot;generatedtypes.h&quot;;
  control;
  dataport simpletype data_sink;
  consumes sig activator;
  dataport Buf uartmem;
}

assembly
{
  composition
  {
    component Timerbase timerbase;
    component Timer timer;
    component UART drv;

    component ProducerThreadImpl Prod_Pinger;
    component ConsumerThreadImpl Cons_PingMe;

    connection seL4SharedData connection0(from Prod_Pinger.data_source, to Cons_PingMe.data_sink);
    connection seL4Notification notification0 (from timer.Prod_Pinger_activator, to Prod_Pinger.activator);
    connection seL4Notification notification1 (from timer.Cons_PingMe_activator, to Cons_PingMe.activator);
    connection seL4HardwareMMIO uart_mem (from Cons_PingMe.uartmem, to drv.mem);
    connection seL4HardwareMMIO timer_mem (from timer.reg, to timerbase.reg);
    connection seL4HardwareInterrupt timer_irq (from timerbase.irq, to timer.irq);
   }

  configuration
  {
    connection0.from_access = &quot;W&quot;;
    connection0.to_access = &quot;R&quot;;
    timerbase.reg_attributes = &quot;0x48040000:0x1000&quot;;
    timerbase.irq_attributes = 68;
    drv.mem_attributes       = &quot;0x48022000:0x1000&quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this declaration, the assembly has two interesting component:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;UART&lt;/strong&gt; (and its related instance &lt;em&gt;drv&lt;/em&gt;) represents the hardware component of the UART. We configure it in the configuration section and its memory area (see &lt;em&gt;drv.mem_attributes = 0x48022000:0x1000&lt;/em&gt;). This will then map the address &lt;em&gt;0x48022000&lt;/em&gt; into the partition in a pointer called uartmem.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ConsumerThreadImpl&lt;/strong&gt; represents the component that is using the hardware component. This component will then contain all the code necessary to execute the driver.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are other artifacts of course, such as the timer and timerbase components that are here to handle the timer and activate periodic tasks. I detailed these aspects before, you can read &lt;a href=&quot;/geek/sel4/2016/04/18/periodic-tasks-with-sel4/&quot;&gt;this post in case you are interested&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The architecture of our CAmkES application is as follow: the producer will send a number that is eventually send through the UART by the Consumer component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sel4-bb-uart1.png&quot; alt=&quot;CAmkES architecture&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementing-the-driver&quot;&gt;Implementing the driver&lt;/h2&gt;

&lt;p&gt;Now, we need to implement the driver. As for the kernel, I used a lot of code from &lt;a href=&quot;https://e2e.ti.com/support/embedded/starterware/f/790/t/214547&quot;&gt;this post on the starterware forum&lt;/a&gt;. Mostly, the code first initialize the UART1 and send the string “hello” followed by the number received (module 10).&lt;/p&gt;

&lt;p&gt;The code of the component looks like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int run(void)
{
        devmem = (unsigned int) uartmem;
        unsigned int UARTparms = 0;
        char mybuf[10];
        int val;

        memset (mybuf, 0, 10);
        UartFIFOConfigure(devmem);
        UARTparms = 0x3; // p4033 - 8 data bits, 1 stop bit, no parity
        UARTsetup(devmem, 115200, UARTparms, UART16x_OPER_MODE);

        while (1)
        {

                activator_wait();
                user_ping_spg ((*data_sink) );
                sprintf(mybuf, &quot;hello %d\n&quot;, (*data_sink % 10));
                UART_tx(devmem, mybuf, 7);
                UART_tx(devmem, &quot;hello&quot;, 5);
                printf (&quot;UART= %d\n&quot;, val);

        }
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We imported some code to initialize and use UART1. The CAmkES code generator mapped the 0x48022000 address (defines in the CAmkES description for the hardware component) in the uartmem component. We assigned the address of the &lt;em&gt;uartmem&lt;/em&gt; variable into &lt;em&gt;devmem&lt;/em&gt;. We can then manipulate the device using this address.&lt;/p&gt;

&lt;p&gt;The code of other functions (&lt;em&gt;UArtFIFOConfigure&lt;/em&gt; and &lt;em&gt;UARTsetup&lt;/em&gt;) are included in the &lt;a href=&quot;(/assets/pingbeagleboneinstance-uart1.tgz)&quot;&gt;zip file containing the full CAmkES application&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;booting-the-application&quot;&gt;Booting the application&lt;/h1&gt;

&lt;p&gt;Once you compiled the application, you need to boot it! If you do not know how to compile or produce binary files for a CAmkES application that targets the Beaglebone Black, you can read the &lt;a href=&quot;http://sel4.systems/Info/CAmkES/GettingStarted.pml&quot;&gt;CAmkES documentation&lt;/a&gt; and the seL4 documentation about the &lt;a href=&quot;https://sel4.systems/Info/Hardware/Beaglebone/&quot;&gt;Beaglebone&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The beaglebone uses something weird called the Device Tree Overlay. You can get &lt;a href=&quot;https://learn.adafruit.com/introduction-to-the-beaglebone-black-device-tree/device-tree-overlays&quot;&gt;information there&lt;/a&gt;. Long story short, this mechanism lets you configure how the PIN of the boards are connected to the AM335x SOC.&lt;/p&gt;

&lt;p&gt;We do not need to change everything but still need to activate the UART1. You can do this when booting the board with u-boot. Type the following lines in u-boot:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mw.l 0x44E10980 0x30
mw.l 0x44E10984 0x00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This would be enough. It seems it cannot work in the component itself. On the other hand, as discussed in &lt;a href=&quot;http://sel4.systems/pipermail/devel/2016-June/000854.html&quot;&gt;this post&lt;/a&gt; it seems you can avoid that by inserting the following line in &lt;em&gt;platform_init()&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*(volatile uint32_t*)0x44E10980 = 0x30;
*(volatile uint32_t*)0x44E10984 = 0x00;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, time to load the binary. I used a network connection to do that.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dhcp ${loadaddr} 192.168.1.1:sel4.img

go ${loadaddr}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, just issue a &lt;em&gt;cat /dev/ttyUSB1&lt;/em&gt; and &lt;em&gt;voila!&lt;/em&gt;. The following picture show what I received from the UART1 of the BeagleBone Black.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sel4-bb-term.png&quot; alt=&quot;Output from UART1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;debugging&quot;&gt;Debugging&lt;/h1&gt;

&lt;p&gt;Sometimes, you need to debug and trace when things are going wrong. You might experience this. I would recommend the &lt;a href=&quot;https://github.com/SEL4PROJ/sel4-tutorials/blob/master/docs/seL4Tutorial.pdf&quot;&gt;seL4 tutorial&lt;/a&gt; that provides some useful direction. When having an exception in a partition, the following command is very useful.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arm-none-eabi-objdump -dS /path/to/your/binary | less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In a nutshell, it gives you the assembly code, its address and with the associated C line. So, you can exactly know where to look for when you get the address related to a crash.&lt;/p&gt;

&lt;p&gt;For example, when debugging the UART1 driver in the partition, I used this command a lot. Very useful. You might need it!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arm-none-eabi-objdump -dS build/arm/am335x/pingbeagleboneinstance/Cons_PingMe.instance.bin | less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;special-thanks&quot;&gt;Special thanks&lt;/h1&gt;

&lt;p&gt;The staff that are working on this project at CMU as well as the seL4 community!&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Patch for the kernel: &lt;a href=&quot;/assets/sel4-kernel-uart1bb.diff&quot;&gt;available here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CAmkES application with the driver: &lt;a href=&quot;/assets/pingbeagleboneinstance-uart1.tgz&quot;&gt;available here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bare code for UART1 support: &lt;a href=&quot;https://e2e.ti.com/support/embedded/starterware/f/790/t/214547&quot;&gt;discussion on TI forums&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sel4.systems/pipermail/devel/2016-June/000849.html&quot;&gt;Related thread on the seL4 mailing list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 15 Jun 2016 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/geek/sel4/beaglebone%20black/2016/06/15/beaglebone-black-sel4-uart1/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/geek/sel4/beaglebone%20black/2016/06/15/beaglebone-black-sel4-uart1/</guid>
        
        <category>sel4</category>
        
        <category>real-time</category>
        
        <category>CAmkES</category>
        
        
        <category>geek</category>
        
        <category>sel4</category>
        
        <category>beaglebone black</category>
        
      </item>
    
      <item>
        <title>Swissvale activity guide</title>
        <description>&lt;p&gt;I have been a resident of &lt;a href=&quot;http://www.swissvale.org&quot;&gt;Swissvale&lt;/a&gt; for more than 2 years now and I think I have a good idea about where to go if you want to be outside. I might miss some details and you are welcome to send errata or just some information to complete this guide.&lt;/p&gt;

&lt;p&gt;The following map is a general map of Swissvale with many points of interests. It includes several places for outdoor and indoor activities.
Also, a good source of information about swissvale can be found on the
&lt;a href=&quot;http://www.swissvale.org&quot;&gt;swissvale community website&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;
&lt;iframe src=&quot;https://www.google.com/maps/d/embed?mid=1H6IwVhrsjCAR9kjU4aMMfAMKr7w&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;

&lt;h1 id=&quot;general-points-of-interests&quot;&gt;General points of interests&lt;/h1&gt;

&lt;h2 id=&quot;frick-park&quot;&gt;Frick Park&lt;/h2&gt;

&lt;p&gt;The Frick Park has a lot to offer for almost everybody. You can walk, run, bike, have a picnic, let’s your kids play on the playground or let your dog exercise in off-leash areas. Located very close to Swissvale, you can just walk/jog/bike there or even park.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://wpoc.org/&quot;&gt;Western Pennsylvanian Orienteering Club&lt;/a&gt; has made a map of Frick Park. You can &lt;a href=&quot;http://wpoc.org/FrickTrailx.pdf&quot;&gt;find it there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/frick-park-map.png&quot; alt=&quot;frick-park-map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wpoc.org/FrickTrailx.pdf&quot;&gt;Topographic map of Frick Park&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;going-to-downtown-by-bike&quot;&gt;Going to downtown by bike&lt;/h2&gt;

&lt;p&gt;From Swissvale, you can go downtown with your bike very easily and using almost only bike lanes. This is about 10 miles, which can be between 30 minutes and one hour, depending your fitness level. The route pass by the south side and along the Monongahela river, which is very pleasant.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mapmyrun.com/routes/view/1056058237&quot;&gt;You can check out the map on mapmyrun&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;connection-to-the-gap&quot;&gt;Connection to the GAP&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://gaptrail.org/&quot;&gt;GAP&lt;/a&gt; lets you do a full 335 miles bike ride from Pittsburgh, PA to Washington D.C. You can easily go on the &lt;a href=&quot;https://gaptrail.org/&quot;&gt;GAP course&lt;/a&gt; from Swissvale, the route pass by Homestead. All it takes it about 2 to 3 miles.&lt;/p&gt;

&lt;p&gt;You can check out &lt;a href=&quot;http://www.mapmyrun.com/routes/view/1056058821&quot;&gt;the map to connect to the GAP from Swissvale on mapmyrun&lt;/a&gt;. An alternative if you do not want to use commercial st. and the trail: use the Rankin bridge, which has a bike lane. You can then connect to the GAP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/on-the-gap.jpg&quot; alt=&quot;on-the-gap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;View while riding on the Great Allegheny Passage&lt;/p&gt;

&lt;h1 id=&quot;running-and-biking&quot;&gt;Running and Biking&lt;/h1&gt;

&lt;h2 id=&quot;general-tips&quot;&gt;General tips&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Do not use South Braddock Avenue, use East-End Avenue instead. You will avoid the pollution and heavy traffic.&lt;/li&gt;
  &lt;li&gt;During winter, be very careful of potential icy spots in Frick.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;going-to-frick&quot;&gt;Going to Frick&lt;/h2&gt;

&lt;p&gt;There are many options to go to Frick. If you go by running/biking/walking, the options are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Go down commercial st and turn right at the bottom of commercial (location of Entrance Frick 1 on the map)&lt;/li&gt;
  &lt;li&gt;Use South Braddock and use the Park entrance at the CLASS building (location of Entrance Frick 2 on the map)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are driving your car, you can park around the park, either at the bottom of commercial, close to the CLASS building or close to the tennis court. The map has some dedicated places to indicate where you can park.&lt;/p&gt;

&lt;p&gt;There is two maps available if you want to train in Frick: a &lt;a href=&quot;http://www.mapmyrun.com/routes/view/1056062605&quot;&gt;10 miles option that go through Frick and Schenley&lt;/a&gt; and a easy 4 miles loop only in Frick&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/frick-park-winter.jpg&quot; alt=&quot;frick-park-winter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Frick Park during Winter&lt;/p&gt;

&lt;h2 id=&quot;fast-5-miles-around-swissvalewilkinsburghedgewood&quot;&gt;Fast 5 miles around Swissvale/Wilkinsburgh/Edgewood&lt;/h2&gt;

&lt;p&gt;There is a good loop around Swissvale/Edgewood/Wilkinsburg that I do regularly and is fantastic if you train for a road race. This is a 5 miles loop that you can extend depending your training needs (you can extend by going in Squirrel Hill through Forbes for example).&lt;/p&gt;

&lt;p&gt;This route does not has much hills so you can have an idea of your pace on a road race, such as a marathon. This is the route I am using when I want to do a speed test for a 10K, a half marathon or a flat marathon such as Pittsburgh. &lt;a href=&quot;http://www.mapmyrun.com/routes/view/1057012411&quot;&gt;Check out the map there!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;route-suggestions&quot;&gt;Route Suggestions&lt;/h2&gt;
&lt;p&gt;The following routes are there to give you some ideas for commuting by bike or running. The goal is not to take the shortest route but the one that is short and try to avoid cars and traffic. It is a good compromise to commute without having potential hazards or issues.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mapmyrun.com/routes/view/1056063795&quot;&gt;Swissvale to Shadyside&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mapmyrun.com/routes/view/1056064393&quot;&gt;Swissvale to Carnegie Mellon University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mapmyrun.com/routes/view/1056064787&quot;&gt;Swissvale to the East-End Food Coop&lt;/a&gt;: no need to use your car anymore to get your groceries!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mapmyrun.com/routes/view/1056062605&quot;&gt;Run around Frick and Schenley Park&lt;/a&gt;: 10 miles with a good elevation, this is perfect if you want to prepare a marathon or even a more challenging event (i.e. ironman, ultra-marathon)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mapmyrun.com/routes/view/1056058821&quot;&gt;Swissvale to the GAP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mapmyrun.com/routes/view/1056058237&quot;&gt;Swissvale to Point State Park&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;walking&quot;&gt;Walking&lt;/h1&gt;

&lt;p&gt;Frick is probably the best place for a walk around. Unfortunately, getting there might take some time and the route to go to the park is not so nice. check out the map to see where you can park. Otherwise, you can still go and walk around Swissvale and go to different parks. The children playground in Swisselm is great when you have some sun.&lt;/p&gt;

&lt;h1 id=&quot;playground&quot;&gt;Playground&lt;/h1&gt;

&lt;h2 id=&quot;swisselm-playground&quot;&gt;Swisselm Playground&lt;/h2&gt;

&lt;p&gt;The Swisselm playground is a great location close to Swissvale. You can also go there by walking or biking (assuming your kid(s) can bike).&lt;/p&gt;

&lt;h2 id=&quot;frick-park-playground&quot;&gt;Frick Park Playground&lt;/h2&gt;

&lt;p&gt;There is also a playground in Frick Park at the entrance on Beechwood Boulevard. Unfortunately, this is not so easy to access it if you are walking and would require to drive. However, there is plenty of parking around.&lt;/p&gt;

&lt;h1 id=&quot;dog-parks&quot;&gt;Dog Parks&lt;/h1&gt;

&lt;p&gt;Frick Park has two dog parks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Located in the lower part of Frick Park, this is easily accessible if you park close to the tennis court (entrance 3 on the map)&lt;/li&gt;
  &lt;li&gt;Located in the upper part of Frick Park, it is better to use the entrance on Beechwood boulevard to find it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;bike-friendly-businesses&quot;&gt;Bike-friendly businesses&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.biddlesescape.com/&quot;&gt;Biddle’s Escape&lt;/a&gt;: this local coffee shop has a bike rack in front of the store. Well located close to Frick Park, this is a fantastic place to have a cup of coffee with a friend or stay to work.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.eastendfood.coop/&quot;&gt;East-End Food Coop&lt;/a&gt;: close to Swissvale ( to 3 miles), it has some bike racks available next to the parking lot. Bonus, we have a map that shows how to get there safely by avoiding South Braddock.&lt;/li&gt;
  &lt;li&gt;Bike racks close to D’s: in the Regent Square area, there are some bike racks close to D’s. Convenient if you want to shop in the area but definitively not as cool as the one from Biddle’s Escape.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;events-around-swissvale&quot;&gt;Events around Swissvale&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.theswissvalemile.com/&quot;&gt;The Swissvale Mile&lt;/a&gt;: a one mile race in the Swissvale community. The race is an opportunity to gather everybody: runner, walker, dog lovers, kids. Consider going there and supporting your community!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gprrc.com&quot;&gt;The Gut Buster&lt;/a&gt;: organized by the Greater Pittsburgh Road Runner Club (GPRRC), the Gut Buster takes place on Thanksgiving day in the morning. There is a 4 and 8 miles options. The race is ridiculously cheap (around $5 I guess) and very friendly. It starts in Frick Park and go through the biggest hills. After the race, you can take another piece of cake without any guilt. You can check out the course (8 miles) on &lt;a href=&quot;https://www.strava.com/activities/439779090&quot;&gt;strava&lt;/a&gt; or &lt;a href=&quot;http://www.mapmyrun.com/workout/1261766983&quot;&gt;mapmyrun&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;www.thepittsburghmarathon.com&quot;&gt;The Pittsburgh Marathon&lt;/a&gt;: the official marathon that goes all over the city.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pedalpgh.org/&quot;&gt;Pedal PGH&lt;/a&gt;: a ride along the city with several distances that accommodates all riders and bikers. Fantastic way to discover Pittsburgh and many places you probably do not know about.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;communities-and-social-media&quot;&gt;Communities and Social Media&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bikepgh.org/&quot;&gt;Bike Pittsburgh&lt;/a&gt;: THE non-profit to join is you like biking in Pittsburgh. They have a fantastic bike map available on their website. Thanks to them, Pittsburgh has more bike lanes since the last years.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://steelcityrrc.org/&quot;&gt;Steel City Road Runners&lt;/a&gt;: probably the biggest running club in Pittsburgh. Supported by the Pittsburgh marathon office, it offers multiple runs every week in different locations across the city.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/FrickParkTrailRunners/&quot;&gt;Frick Park Trail Runners on facebook&lt;/a&gt;: group to organize runs in Frick Park&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;maps&quot;&gt;Maps&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wpoc.org/FrickTrailx.pdf&quot;&gt;Frick Park Topographic Map&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;suggestions&quot;&gt;Suggestions?&lt;/h1&gt;
&lt;p&gt;If you have any question or suggestion to improve this, please &lt;a href=&quot;/about&quot;&gt;contact me&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 May 2016 00:00:00 -0700</pubDate>
        <link>http://julien.gunnm.org/swissvale-active/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/swissvale-active/</guid>
        
        <category>swissvale</category>
        
        <category>biking</category>
        
        <category>running</category>
        
        <category>walking</category>
        
        <category>children</category>
        
        <category>playground</category>
        
        
        <category>swissvale</category>
        
      </item>
    
  </channel>
</rss>
