<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julien Delange</title>
    <description>Harder, Better, Faster, Stronger</description>
    <link>http://julien.gunnm.org/</link>
    <atom:link href="http://julien.gunnm.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 13 Jun 2018 19:56:35 -0700</pubDate>
    <lastBuildDate>Wed, 13 Jun 2018 19:56:35 -0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Learning Scala in 2018</title>
        <description>&lt;p&gt;Since I joined &lt;a href=&quot;http://www.twitter.com&quot;&gt;Twitter&lt;/a&gt;, I had to learn &lt;a href=&quot;http://www.scala-lang.org&quot;&gt;Scala&lt;/a&gt;
and be familiar with the language in order to contribute to the codebase.
I was familiar with Java (I spent 4+ years maintaining &lt;a href=&quot;http://www.osate.org&quot;&gt;OSATE&lt;/a&gt; while working
at Carnegie Mellon) and I thought that it would be somehow easy, quick and painless.&lt;/p&gt;

&lt;p&gt;I was dead wrong.&lt;/p&gt;

&lt;p&gt;Yes, Scala runs on top of the JVM but it does not mean it shares so much with Java. Scala is a functional programming language and is way more
complicated than Java. This is another level of complexity. 
When I joined Twitter, I started to contribute to a codebase
with people writing Scala for 4+ years and use the nice and barely documented features for advanced
users. With such a complicated language, the learning curve was very steep and I had to go through it
very quickly to be able to produce anything meaningful.&lt;/p&gt;

&lt;p&gt;That &lt;em&gt;was&lt;/em&gt; hard. But not painful.&lt;/p&gt;

&lt;p&gt;I love learning and I had a ton of fun learning a new language.&lt;/p&gt;

&lt;p&gt;After three months, I am still learning every day and continue to read about advanced features
of the language. But I am now somewhat familiar enough with the basics concepts of Scala that I can be
an active contributor in different projects and teach the language fundamentals at my work.&lt;/p&gt;

&lt;p&gt;I wanted to share the current state of the resources to learn Scala in 2018. After 14 years
of existence, a lot of materials have been produced and I wanted to share what has been 
working for me.&lt;/p&gt;

&lt;h1 id=&quot;the-good&quot;&gt;The Good&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://horstmann.com/scala/index.html&quot;&gt;Scala The Impatient&lt;/a&gt; is a good resource but way too light. It covers only some very basic concepts and you do not see some advances features that are really interesting. Read it but do not stop there.&lt;/li&gt;
  &lt;li&gt;The blog post series of &lt;a href=&quot;https://danielwestheide.com/&quot;&gt;Daniel Westheide&lt;/a&gt;: &lt;a href=&quot;https://danielwestheide.com/scala/neophytes.html&quot;&gt;The Neophyte’s Guide to Scala&lt;/a&gt;. A &lt;strong&gt;must-read&lt;/strong&gt; if you are new to Scala. The examples are great, with many details.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Programming-Scala-Updated-2-12/dp/0981531687/ref=sr_1_1?ie=UTF8&amp;amp;qid=1528782250&amp;amp;sr=8-1&amp;amp;keywords=odersky+scala&quot;&gt;Programming in Scala&lt;/a&gt; by Martin Odersky: great resource to go deeper about the internals of the language
(how containers work, etc.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.github.io/util/&quot;&gt;Twitter util&lt;/a&gt; all the code developed by Twitter - some ideas (like Future) have been merged into the language.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-bad&quot;&gt;The Bad&lt;/h1&gt;

&lt;p&gt;The classes on Coursera are unfortunately not that great.
There is a specialization dedicated to Scala and I completed two of the classes in that specialization.
I was very disappointed by the content, especially because I love Coursera (and completed 
great classes on the platform).
Some of the assignments do not match the class, the content is often too confusing.
This specialization is not free (you need to pay a $50 montly membership), which would be &lt;em&gt;ok&lt;/em&gt; 
if the content was good. Unfortunately, this is not that great and I would recommend to stick
with other resources (like the blog posts from &lt;a href=&quot;https://danielwestheide.com/scala/neophytes.html&quot;&gt;Westheide&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;focus-on-the-functional-programming-concepts&quot;&gt;Focus on the Functional Programming concepts&lt;/h1&gt;
&lt;p&gt;One of the best advice I could give is to focus on the principles of functional programming. Do not focus
too much on the syntax and other details (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;case class&lt;/code&gt;). Just learn and practice functional 
programming concepts such as:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Monad&lt;/strong&gt;: this is just a container but a fundamental concept for functional programming. &lt;a href=&quot;https://medium.com/@sinisalouc/demystifying-the-monad-in-scala-cc716bb6f534&quot;&gt;Good article that explains the Monad&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;All &lt;strong&gt;transformations functions&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;drop&lt;/code&gt;. Know them. Practice them. RTFM the &lt;a href=&quot;https://www.scala-lang.org/api&quot;&gt;Scala API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;What is &lt;strong&gt;&lt;a href=&quot;https://www.quora.com/What-is-tail-recursion-1&quot;&gt;tail recursion&lt;/a&gt;&lt;/strong&gt; and understand why Scala will not blow your stack&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;use-a-good-ide&quot;&gt;Use a good IDE&lt;/h1&gt;

&lt;p&gt;If you cut meat, you do not use the bread knife. Similarly, when you program in Scala, you
do not use vim or emacs. You could but this is just inefficient and a waste of time when
great IDE provide a ton of support for understanding the source code and digging into
the standard library.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt; and I am regularly discovering new capabilities
(and amazed by many features, such as refactoring). There are my two favorite features
in this IDE:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you press the &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; key three times very quickly a search dialog appears and you can search for anything inside your project (thanks Adam for the tip!).&lt;/li&gt;
  &lt;li&gt;Just do &lt;code class=&quot;highlighter-rouge&quot;&gt;command+click&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;alt+click&lt;/code&gt; on a variable, reference, type to go to its declaration. Very powerful to browse and explore code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;code-repository&quot;&gt;Code Repository&lt;/h1&gt;

&lt;p&gt;I started a repository that contains code samples for Scala beginners.
This is a way to share some code with beginners and help newcomers in the Scala community.
This code is intentionally over-documented and often explains what the code does
step by step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can find the repository at:  &lt;a href=&quot;https://github.com/juli1/scala-cookbook&quot;&gt;https://github.com/juli1/scala-cookbook&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;keep-learning&quot;&gt;Keep Learning&lt;/h1&gt;

&lt;p&gt;There is always more to learn! Some ideas to improve your knowledge of Scala:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Follow &lt;a href=&quot;https://twitter.com/scala_lang&quot;&gt;@scala_lang&lt;/a&gt; on Twitter!&lt;/li&gt;
  &lt;li&gt;Subscribe to &lt;a href=&quot;http://scalatimes.com/&quot;&gt;Scala Times&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Follow the Scala topic on &lt;a href=&quot;http://www.quora.com&quot;&gt;Quora&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/scala/programming/2018/06/12/how-to-learn-scala-in-2018/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/scala/programming/2018/06/12/how-to-learn-scala-in-2018/</guid>
        
        <category>scala</category>
        
        <category>intellij</category>
        
        <category>programming</category>
        
        <category>help</category>
        
        
        <category>scala</category>
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>The symbol of the Falcon Heavy launch</title>
        <description>&lt;p&gt;Until very recently, space exploration was something that did not get much traction.
People stopped dreaming about space and rockets long time ago.&lt;/p&gt;

&lt;p&gt;Until this happened.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/A0FZIwabctw&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;In less than 10 minutes, a giant rocket took off, its side booster came back on earth and a roadster was in space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BOOM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A lot of things have been said about the rocket itself, about SpaceX founder Elon Musk
and what it means for the future of space exploration and space travel. I do not want to talk about this.&lt;/p&gt;

&lt;p&gt;I want to share some insights about the incidental effect of this launch.
There are the main few thoughts.&lt;/p&gt;

&lt;h1 id=&quot;if-you-want-to-disrupt-do-not-listen-to-the-experts&quot;&gt;If you want to disrupt, do not listen to the experts&lt;/h1&gt;

&lt;p&gt;When I was working at the European Space Agency (&lt;a href=&quot;http://www.esa.int&quot;&gt;ESA&lt;/a&gt;) for about 2 years, people were making fun of SpaceX.
Space experts (engineers, directors - almost everybody at that time)
considered Musk was an idiot with an irrealistic dream of building reusable rockets.&lt;/p&gt;

&lt;p&gt;For years, the company was discredited, saying that the idea of landing rockets
was not feasible.&lt;/p&gt;

&lt;p&gt;Until this happened.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/rocket-landing.gif&quot; alt=&quot;Landing&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SpaceX made it happen and now, the same experts that made fun of him 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Adeline_(rocket_stage)&quot;&gt;copy him&lt;/a&gt;. It will take them years to catch-up (the first reusable rocket
from ESA is announced to start to be tested in 2020 - SpaceX succeeded in 2015!). The person they called
an idiot years ago disrupt their industry and will make them bankrupt.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 1&lt;/strong&gt;: dream big, worry small&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 2&lt;/strong&gt;: do not be overconfident, anybody can attack your business and make you bankrupt tomorrow&lt;/p&gt;

&lt;h1 id=&quot;governments-are-inefficient&quot;&gt;Governments are inefficient&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ariane_6&quot;&gt;Ariane 6&lt;/a&gt; will take $3.6B euros to develop. The Falcon Heavy development cost was $500M and 
can take embedd more payload than the future Ariane. So, why such a difference?&lt;/p&gt;

&lt;p&gt;There are two main reasons: work inefficiency and lack/fear of innovation.&lt;/p&gt;

&lt;p&gt;Actual rocket developments is done by government agencies. The work is often done
by contractors that are very expensive (you have to pay the contractor agency, which
takes a fee - they act as a middleman). There are also some workers that are not 
competent and still employed and/or people
promoted for political reasons while not being effective and block other, more competent engineers
that are frustrated and leave after few years. At the end of the day, this is a large overhead.
Also, in the case of ESA, there is the &lt;a href=&quot;https://www.esa.int/About_Us/Business_with_ESA/How_to_do/Industrial_policy_and_geographical_distribution&quot;&gt;geographic return policy&lt;/a&gt;:
past projects are not re-used and the tax payer pay the same project twice!&lt;/p&gt;

&lt;p&gt;The second is lack of innovation and fear of disruption. Until SpaceX started
to be seriously in the space business, rocket launchers and satellites were using proprietary processors
paid at outrageous prices. In the case of european space programs,
&lt;a href=&quot;https://www.gaisler.com/&quot;&gt;gaisler research&lt;/a&gt;, a company started by a former ESA employee, 
is the main (only?) hardware provider for onboard computers.
Its electronic components cost dozen of thousands of euros
and each sub-contractor for any space program has to purchases these processors. As there is only one
provider for these processor, there is no competition on the price and the company can set the price
the tax-payer will end up paying! SpaceX took a radically different
direction by using off-the-shelf components make them resilient to radiation using redundant
systems. Instead of feeding companies
that set their own prices, SpaceX designed a system that uses multiple cheap component and coordinate them
to be resilient to failure. There is no doubt that they apply the same principles at different steps of the
supply chain to reduce costs at scale. Simple and efficient.&lt;/p&gt;

&lt;p&gt;The point is: space programs have been run by governmental organizations, which are
inefficient and end up wasting the taxpayer money.
SpaceX gave the proof by reducing drastically 
the cost of a launch ($60M for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Falcon_9&quot;&gt;Falcon9&lt;/a&gt; launch versus $200M for Ariane5) 
and reduce development costs (see above). 
Government presence is necessary in some areas
but they are not designed to run businesses efficiently, this has been shown multiple times
in history (the telecom business in France is a good one too).&lt;/p&gt;

&lt;h1 id=&quot;immigration-is-a-force&quot;&gt;Immigration is a force&lt;/h1&gt;

&lt;p&gt;There is a lot of discussion about immigration in the previous months. I do not want
to have a political discussion there, this is not my objective. My point is that SpaceX is a company 
started by an immigrant and many SpaceX employees are foreigners.&lt;/p&gt;

&lt;p&gt;Immigration bring people that are hungry and want to raise the bar. Look around major US companies today:
one founder of Alphabet is Russian, the CEO of Google is Indian as the CEO of Microsoft!
Foreigners come in a country because they have big dream. They come to realize them
They are a force: their positive energy is the fuel of innovation and success.&lt;/p&gt;

&lt;h1 id=&quot;usa-is-where-dreams-happen&quot;&gt;USA is where dreams happen&lt;/h1&gt;

&lt;p&gt;A success like the Falcon Heavy project would never have happened in Europe: were laughing at Musk
and his ideas of reusable rockets! No government would have funded him outside of the USA. Europe is the culture of the nay-sayer, where
people prefer blaming rather than trying and learning from their failure.&lt;/p&gt;

&lt;p&gt;USA is the country where you have enough freedom to start and experience ideas. This is where
new technologies are created. Where self-driving cars are emerging where energy efficient 
materials are produced. And now, new rockets are taking off. USA is the country where your dreams can become reality.&lt;/p&gt;

&lt;h1 id=&quot;the-future-is-bright-for-the-space-business&quot;&gt;The future is bright for the Space business&lt;/h1&gt;

&lt;p&gt;This launch was a great promotion for Space X, no doubt about this. And now, people are talking again about space exploration
and space travel. SpaceX, &lt;a href=&quot;https://www.blueorigin.com/&quot;&gt;Blue Origin&lt;/a&gt; and new companies will be competing. 
This will open more opportunities in a very near future, not only for space travel but potentially
for establishing colonies on other planets. The dark days are gone for the space business.&lt;/p&gt;

</description>
        <pubDate>Thu, 26 Apr 2018 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/thoughts/spacex/falcon%20heavy/2018/04/26/falcon-heavy-launch/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/thoughts/spacex/falcon%20heavy/2018/04/26/falcon-heavy-launch/</guid>
        
        <category>us</category>
        
        <category>falcon heavy</category>
        
        <category>esa</category>
        
        <category>space</category>
        
        
        <category>thoughts</category>
        
        <category>spacex</category>
        
        <category>falcon heavy</category>
        
      </item>
    
      <item>
        <title>Goodbye Amazon, Hello Twitter</title>
        <description>&lt;p&gt;After more than a year at &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;Amazon Web Services&lt;/a&gt;, I will
be joining &lt;a href=&quot;https://www.twitter.com&quot;&gt;Twitter&lt;/a&gt; and work on their infrastructure.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;https://twitter.com/juli1pb&quot;&gt;twitter account&lt;/a&gt; might be more active!&lt;/p&gt;

&lt;p&gt;I am really thankful and lucky that I have been given the
opportunity to work at AWS. I worked at a scale I would never imagine and
met fantastic people. I hope I will make as big of an impact at
Twitter! The future is exciting!&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/twitter-logo.jpg&quot; alt=&quot;Twitter logo&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Feb 2018 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/job/2018/02/25/goodbye-amazon-hello-twitter/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/job/2018/02/25/goodbye-amazon-hello-twitter/</guid>
        
        <category>job</category>
        
        <category>twitter</category>
        
        
        <category>job</category>
        
      </item>
    
      <item>
        <title>On working remotely</title>
        <description>&lt;p&gt;When I started working at Amazon Web Services, I moved from Pittsburgh, PA to 
Seattle, WA. But six months later, I relocated in San Francisco, CA and continued
to work remotely with my team located in Seattle, WA.&lt;/p&gt;

&lt;p&gt;Working remotely can be challenging. It works for me but not without change.
A &lt;a href=&quot;https://twitter.com/b0rk/status/944620024303702021&quot;&gt;recent tweet&lt;/a&gt;
motivated me to to share this experience and what works/doesn’t work for me
(and might work/don’t work for you - don’t try this at &lt;del&gt;home&lt;/del&gt; work).&lt;/p&gt;

&lt;h1 id=&quot;pro-active-communication-and-documentation&quot;&gt;Pro-active communication and documentation&lt;/h1&gt;
&lt;p&gt;By nature, you no longer have
the regular chat about this new cool project over lunch or in the corridor.
People are not stopping at your desk to just discuss an idea while having coffee.
You are off these discussions and you need to find other ways to be up to date
and informed about what is going on in your team/company.&lt;/p&gt;

&lt;p&gt;This definitively change the way you communicate and document your work and
 you need be proactive. The
informal chat in the corridor is now a wiki page or an e-mail that describes
the idea with references. It not only facilitates
communication between with the team, but increases the quality of the documentation overall.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: document as much as you can (on a wiki, markdown files, etc.) and
make your team/manager aware of what you are working on. 
Avoid to take e-mail as a way to document your work:
people delete e-mails, use wiki (good) or markdown documents on a git repository
(better).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away 2&lt;/strong&gt;: be proactive when communicating with your manager. Send weekly report
to keep him up-to-date so that he knows on what you are working. Do not assume anything,
document explicitly everything.&lt;/p&gt;

&lt;h1 id=&quot;avoid-work-from-home&quot;&gt;Avoid work from home&lt;/h1&gt;
&lt;p&gt;Working from home sounds very appealing but it can in fact be a terrible idea.
When working from home, it is easy to
spend 10 minutes every hour doing something totally unrelated to work. Or to
assume that &lt;em&gt;you can do this chore during the day while working&lt;/em&gt; 
(for example, between two code reviews).&lt;/p&gt;

&lt;p&gt;It just doesn’t work. When doing the chore, you are thinking about work. Or while working, 
you are obsess with the chore and you want to get it done right &lt;strong&gt;now&lt;/strong&gt;. In short:
staying at home does not help to focus.&lt;/p&gt;

&lt;p&gt;You also end up with the feeling you are always at home (and think you do
nothing) or at work (and you keep working all the time). Having a physical separation
between home and work help to allocate time and know your limits.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/dr-evil-wfh.jpg&quot; alt=&quot;Working From Home&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, work is also a way to socialize (engage with colleagues,
discuss points of view and perspectives). While working remotely, it is
important to keep this aspect, by having a desk in another location, sharing a
co-working space or just going in a working area in a coffee shop!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: separate work from life physically and mentally. Going to an office not only 
helps to focus and also socialize with other people in your company (happy hour anyone?).&lt;/p&gt;

&lt;h1 id=&quot;schedule-your-day-and-stick-to-it&quot;&gt;Schedule your day and stick to it&lt;/h1&gt;
&lt;p&gt;One major benefit of working remotely: no unwanted interruption
from your manager/co-workers (except if they page you, which does not happen
very often). You are more effective because you can focus on something and
nobody will come and interrupt you (downside - as discussed
earlier: less social interaction). Also, people invites you only to important
meeting and you can easily refuse the ones you feel you do not bring value.&lt;/p&gt;

&lt;p&gt;Consequence: you have more time and can focus on whatever you want. Downside:
you can work on the same thing for hours while you need to make progress on
others project too. This happens when being in an office but is amplified when working
remotely.&lt;/p&gt;

&lt;p&gt;To avoid this, the solution is to clearly schedule the day, cut it into time slots
(1 to 2 hours) and allocate a task for each. It helps to stay focus on what you are
going to work through the day and make progress on all the projects you are working on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: write down your schedule (every day, every week, whatever period
works for you) and stick to it. Review it after a while to see how you can
adapt/be more efficient.&lt;/p&gt;

&lt;h1 id=&quot;keep-an-open-chat-policy&quot;&gt;Keep an open-chat policy&lt;/h1&gt;
&lt;p&gt;Your co-workers and team-members might be reluctant to engage via e-mail and/or
chat. 
After all, it is sometimes easier to come to your desk, ask to go for
coffee and discuss.&lt;/p&gt;

&lt;p&gt;This is important to make it clear to the people you help/mentor that they
can ping/page you anytime. &lt;strong&gt;Anytime&lt;/strong&gt;. Even after &lt;em&gt;“work hours”&lt;/em&gt;. For any 
(work-related) question.&lt;/p&gt;

&lt;p&gt;The rationale is simple: if one team member doesn’t know what to do after receiving a page in the middle
of the night, that is your responsibility to help them and make them feel safe.
It is always better to be interrupted for and make sure the person makes
progress rather than letting them in the unknown and feeling they cannot do
anything. After all, this is your job to mentor people and make them feel safe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt; : make it clear than you are available through chat and try to
make people feel safe about discussing anything, even if they feel this is a
stupid/silly question (no question is stupid).&lt;/p&gt;

&lt;h1 id=&quot;make-sure-your-organization-is-ready&quot;&gt;Make sure your organization is ready&lt;/h1&gt;
&lt;p&gt;If you are going to be be remote, make sure the rest of the organization is
ready. That means there is the necessary infrastructure to work remotely (video
conference system, messenger/chat (Slack or Chime), etc).&lt;/p&gt;

&lt;p&gt;Your organization must be ready for day 1. If people are scheduling meeting and
you cannot join, this is not going to work. If your manager doesn’t use the
video conference system when having a conversation with other teams, you will
not be included in them. Make sure your team/company has the tools and infrastructure
(Skype, teamwork tools, etc.) so that you can communicate with your team/company.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: make sure the company you are working for has the necessary
infrastructure to be part of the team and share information while working
remotely.&lt;/p&gt;

&lt;h1 id=&quot;visit-periodically&quot;&gt;Visit periodically&lt;/h1&gt;
&lt;p&gt;If your team is physically located somewhere (after all, some company have
100% remote workers!), visit periodically. 
Take the opportunity to have face to face discussions with
other teams about new projects. Go for a beer with your colleagues and
socialize. You will probably learn a lot about other projects and people are
sometimes more open to discuss while having a face to face conversation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: if possible, come back sometimes, have meetings to discuss new
projects (use a whiteboard!). Go for a beer with your team (and offer the first
round).&lt;/p&gt;

&lt;h1 id=&quot;and-to-finish-&quot;&gt;And to finish …&lt;/h1&gt;
&lt;p&gt;This list represents what has been important to me while working remotely.
Every person and company is different and what worked for me might not
be working for you!&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jan 2018 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/job/remote%20work/2018/01/26/challenge-to-work-remotely/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/job/remote%20work/2018/01/26/challenge-to-work-remotely/</guid>
        
        <category>job</category>
        
        <category>amazon</category>
        
        
        <category>job</category>
        
        <category>remote work</category>
        
      </item>
    
      <item>
        <title>Deploying a Flask Application with Docker on a Raspberry Pi</title>
        <description>&lt;p&gt;I have been very frustrated by actual messaging apps. To me, the best way to communicate is to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Relay_Chat&quot;&gt;Internet Relay Chat&lt;/a&gt;. It includes all the features I need: multi-channels, private conversation, administration, etc. Unfortunately, for many people, IRC is not user friendly enough or lack many kikoolol(tm) capabilities (such as emojis, which seems to be the ultimate feature for some people).&lt;/p&gt;

&lt;p&gt;I do not want to use over-killed solutions or have many applications that bother and interrupt me all the time. That was a motivation
to implement a very simple message board to exchange messages with friends. The application is very simple: we can have different users, each user can post message. Admins can change password or delete users.&lt;/p&gt;

&lt;p&gt;This is how it looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/flask-chat.png&quot; alt=&quot;Flask Chat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The application relies on the &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask framework&lt;/a&gt; and uses a SQLite database to store users/messages information.
If you want to use the application and play locally, check the github application page: &lt;a href=&quot;https://github.com/juli1/flask-chat&quot;&gt;https://github.com/juli1/flask-chat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article series explains how to deploy this Flask application on your own server using docker. You can also deploy the same container
in AWS, GCP or Azure. Your choice. I just choose my Raspberry Pi because this is a computer that I have at home, I have full control over it and there is an interesting challenge to host a docker image on such a small computer.&lt;/p&gt;

&lt;p&gt;This article will explain:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to checkout and try the application&lt;/li&gt;
  &lt;li&gt;How to build a docker container for it&lt;/li&gt;
  &lt;li&gt;How to run the docker container on your local machine&lt;/li&gt;
  &lt;li&gt;How to run the docker container on a raspberry pi&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-application&quot;&gt;The Application&lt;/h1&gt;
&lt;p&gt;I already wrote the application. This is a simple chat, you can check out the code there: &lt;a href=&quot;https://github.com/juli1/flask-chat&quot;&gt;https://github.com/juli1/flask-chat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even try it out locally:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/juli1/flask-chat.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;flask-chat
&lt;span class=&quot;c&quot;&gt;# Replace the following line with virtualenv if necessary&lt;/span&gt;
python3.X &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; venv venv &lt;span class=&quot;c&quot;&gt;# Replace X with your version of python&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;flask/bin/activate
pip install &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
./run-debug.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, open your web-browser and go to &lt;a href=&quot;https://localhost:5000&quot;&gt;https://localhost:5000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also signed up to have continuous integration with &lt;a href=&quot;https://travis-ci.org/&quot;&gt;travis-ci&lt;/a&gt; and code coverage report from &lt;a href=&quot;https://coveralls.io/&quot;&gt;coveralls&lt;/a&gt;. Just because this is cute to have.&lt;/p&gt;

&lt;h1 id=&quot;building-the-docker-image&quot;&gt;Building the docker image&lt;/h1&gt;

&lt;p&gt;Now, we need to build a docker image to be able to deploy this everywhere.&lt;/p&gt;

&lt;p&gt;The first thing we need is to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; that defines how to build your container.&lt;/p&gt;

&lt;p&gt;In the following file, we perform the major following steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install all dependencies (&lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;python3-pip&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;copy our app in &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt; in the container&lt;/li&gt;
  &lt;li&gt;install all the python dependencies (specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;create a fresh database &lt;code class=&quot;highlighter-rouge&quot;&gt;db_create.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;specify the command to execute the application &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 run-production.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM python:3.6-slim-stretch
MAINTAINER Julien Delange &amp;lt;julien@gunnm.org&amp;gt;
RUN apt-get update -y
RUN apt-get install -y python3 python-pip-whl python3-pip
COPY . /app
WORKDIR /app
RUN pip3 install -r requirements.txt
RUN rm -f app.db
RUN python3 ./db_create.py
EXPOSE 5050
ENTRYPOINT [&quot;python3&quot;]
CMD [&quot;run-production.py&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we are done, we can build the docker image. To do so, just invoke the following command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t flask-chat:latest .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;running-the-docker-image-on-your-local-machine-or-on-your-raspberry-pi&quot;&gt;Running the docker image on your local machine or on your raspberry pi&lt;/h1&gt;

&lt;p&gt;Now, it is time to run the docker image freshly built!&lt;/p&gt;

&lt;p&gt;If you want to run the image you built on your computer into a docker container, just run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 10000:10000 flask-chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command run the container and binds the local port 10000 to the container port 5050 (on which the flask application is listening to).&lt;/p&gt;

&lt;p&gt;If you just want to use the pre-built image from &lt;a href=&quot;https://hub.docker.com/r/juli1/flask-chat/tags/&quot;&gt;dockerhub&lt;/a&gt;
on your local machine, run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 10000:10000 juli1/flask-chat:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, if you want to run the pre-built image from &lt;a href=&quot;https://hub.docker.com/r/juli1/flask-chat/tags/&quot;&gt;dockerhub&lt;/a&gt;
on your raspberry pi, run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 10000:5050 juli1/flask-chat:rpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to actually build the container on your raspberry pi, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile.rpi&lt;/code&gt;`file
in the root directory of the project like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t flask-chat:latest . -f Dockerfile.rpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/h1&gt;
&lt;p&gt;We are in 2017 (soon 2018) and continuous deployment/integration is just the way to go. Automating
the build of your docker container is very easy - you can just &lt;a href=&quot;http://www.travis-ci.org&quot;&gt;travis-ci&lt;/a&gt; or &lt;a href=&quot;http://docker.com&quot;&gt;docker&lt;/a&gt;
do trigger every time there is a commit.&lt;/p&gt;

&lt;p&gt;What is more difficult is to build the image for raspberry pi. This &lt;a href=&quot;https://blog.hypriot.com/post/setup-simple-ci-pipeline-for-arm-images/&quot;&gt;tutorial&lt;/a&gt;
helped a lot. If you want to build your own docker image for raspberry pi, have a look at my 
&lt;a href=&quot;https://github.com/juli1/flask-chat/blob/master/Dockerfile.rpi&quot;&gt;the Dockerfile.rpi&lt;/a&gt; in the project github directory.&lt;/p&gt;

&lt;h1 id=&quot;useful-resources&quot;&gt;Useful resources&lt;/h1&gt;
&lt;p&gt;The chat application is available on my github account: &lt;a href=&quot;https://github.com/juli1/flask-chat&quot;&gt;https://github.com/juli1/flask-chat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The docker images are on this repository: &lt;a href=&quot;https://hub.docker.com/r/juli1/flask-chat/&quot;&gt;https://hub.docker.com/r/juli1/flask-chat/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The docker image for intel is: juli1/flask-chat:latest&lt;/li&gt;
  &lt;li&gt;The docker image for raspberry pi is: juli1/flask-chat:rpi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some resources I used during my search for information on rust.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;The Flask Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&quot;&gt;The Amazing Flask Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://containertutorials.com/docker-compose/flask-simple-app.html&quot;&gt;Docker container for Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 03 Dec 2017 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/flask/python/docker/raspberry-pi/2017/12/03/developing-deploying-with-docker-on-raspberry-pi/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/flask/python/docker/raspberry-pi/2017/12/03/developing-deploying-with-docker-on-raspberry-pi/</guid>
        
        <category>flask</category>
        
        <category>docker</category>
        
        <category>gcp</category>
        
        <category>azure</category>
        
        <category>aws</category>
        
        
        <category>flask</category>
        
        <category>python</category>
        
        <category>docker</category>
        
        <category>raspberry-pi</category>
        
      </item>
    
      <item>
        <title>Learning rust, implementing a webserver</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I wanted to learn &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;rust&lt;/a&gt; months ago. I remember
attending a talk in Pittsburgh several years ago about rust and I liked the idea
that instead of re-implementing the wheel, it tries to solve issues other new
languages never try to fix (or did it in an efficient/ineffective way).&lt;/p&gt;

&lt;p&gt;I spent some time over the last two weeks to learn the langage and complete a
project in rust: a webserver. Nothing really fancy, it was rather a way to learn
the language. I believe the best way to learn a new language is to complete few
new projects.&lt;/p&gt;

&lt;p&gt;This is the result: I am able to run a webserver that can host this blog, as
shown in the picture below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rust-webserver-browser.png&quot; alt=&quot;Blog running on rust webserver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is basically how to launch it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rust-webserver-term.png&quot; alt=&quot;Terminal with Cargo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will talk about this project and share some thoughts about
rust.&lt;/p&gt;

&lt;h1 id=&quot;a-web-server-in-rust&quot;&gt;A web server in rust&lt;/h1&gt;

&lt;h2 id=&quot;specifications&quot;&gt;Specifications&lt;/h2&gt;
&lt;p&gt;I wanted to implement a simple webserver in rust to understand/practice/use the
language. The goal was to be able to have a server able to show a static
website. This is an experiment and this should absolutely &lt;strong&gt;not be used in
production&lt;/strong&gt;. This project is useful if you are new to rust and/or want a
codebase about networking features in rust (such as using the
&lt;a href=&quot;https://docs.rs/mio&quot;&gt;mio&lt;/a&gt; or &lt;a href=&quot;https://doc.rust-lang.org/getopts&quot;&gt;getops&lt;/a&gt;
crates).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non goals&lt;/strong&gt;: full http support, large file handling, security (you can access
the full FS ).&lt;/p&gt;

&lt;h2 id=&quot;get-the-code-and-run-it&quot;&gt;Get the code and run it&lt;/h2&gt;
&lt;p&gt;The code is publicly available on github at:
&lt;a href=&quot;https://github.com/juli1/rust-webserver&quot;&gt;https://github.com/juli1/rust-webserver&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# git clone https://github.com/juli1/rust-webserver.git
# cd rust-webserver
# cargo build &amp;amp;&amp;amp; cargo run -- -p 9065 -l 127.0.0.1 --rootdir `pwd`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, open your browser and go to
&lt;a href=&quot;http://localhost:9065/Cargo.toml&quot;&gt;http://localhost:9065/Cargo.toml&lt;/a&gt;. You will
be able to see the file from the source directory.&lt;/p&gt;

&lt;h2 id=&quot;details-of-the-code&quot;&gt;Details of the code&lt;/h2&gt;

&lt;p&gt;The code is separated into four files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;server.rs&lt;/code&gt; is about all the server part to listen on the socket,
communication handling and so on.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client.rs&lt;/code&gt; is about handling request/reply for a particular connection.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;protocol.rs&lt;/code&gt; contains all the code with all the data structure related to the
requests and replies.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main.rs&lt;/code&gt; checks the options passed to the command line, create a server and
… nothing else!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code does not handles all HTTP headers. The server supports HTTP/1.0 only.
The parsing of command is very basic. The server supports basically two file
types: html, png and jpg. Yes, this is very basic but met my goal: it was an
awesome way to learn rust and I loved it!&lt;/p&gt;

&lt;h1 id=&quot;feedback-about-rust&quot;&gt;Feedback about rust&lt;/h1&gt;

&lt;p&gt;I really like rust. At first, the language brings a lot of frustration because of all the
restrictions and scope, borrow, etc. You really need to undertand these concepts
to make any progress. Once you pass the first hours digging online about the
errorr messages (that are pretty clear by the way), you realize how the language
help you to bring more assurance that your code is safe and free of errors. It
reminds me several aspects of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ada_(programming_language)&quot;&gt;Ada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rust is what we should be expecting for the next generation of language to do
low-level/system programming (program like webservers, file servers, etc.). It will probably not be
the language I will use if I design a web application. On the other hand, this
will probably be my choice if I need to do a web-server, file server or any
program and needs to be safe, reliable and performant.&lt;/p&gt;

&lt;h2 id=&quot;rust-pros&quot;&gt;Rust: pros&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Compiler error messages&lt;/strong&gt;: Debug messages are clean and useful. We are very far from C++ compilers that
produces a tons of useless error messages that hide the cause of the issue. When
starting in Rust, you will have a tons of compilation errors but error messages
will be easy to understand to fix your program and make progress.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: programs written in Rust seems fast. I did not benchmark but this
seems very promising.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Predictability&lt;/strong&gt;: rust reminds me Ada: it is painful to write your first
program because of all the language restrictions. However, once it compiles, it
generally works as expected. I had very few crashes during the development of
the webserver but I had a ton of error messages before it even starts working.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ownership&lt;/strong&gt; : the concept behind ownership is painful at first but after a
while, it is easy to understand how powerful it can be.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rust-cons&quot;&gt;Rust: cons&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Lifetime&lt;/strong&gt;: the idea behind &lt;a href=&quot;https://rustbyexample.com/scope/lifetime.html&quot;&gt;lifetime&lt;/a&gt;
is really powerful and useful. The language &lt;em&gt;needs&lt;/em&gt; have a way to annotate the
lifetime of objects/variables but the syntax is horrible and the whole mechanism
is ultra verbose.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;useful-resources&quot;&gt;Useful resources&lt;/h1&gt;
&lt;p&gt;These are some resources I used during my search for information on rust.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rustbyexample.com/&quot;&gt;Rust By Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.burntsushi.net/rust-error-handling/&quot;&gt;Error Handing in rust&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jmarshall.com/easy/http/&quot;&gt;HTTP made very easy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 18 Nov 2017 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/rust/2017/11/18/learning-rust-in-practice-webserver-in-rust/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/rust/2017/11/18/learning-rust-in-practice-webserver-in-rust/</guid>
        
        <category>rust</category>
        
        <category>webserver</category>
        
        
        <category>rust</category>
        
      </item>
    
      <item>
        <title>How to prepare for an interview at Amazon</title>
        <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I am currently a Senior SDE at Amazon Web Services (and &lt;a href=&quot;https://www.linkedin.com/in/juli1&quot;&gt;I am hiring&lt;/a&gt;, my team
is &lt;em&gt;awesome&lt;/em&gt;, please message me if you are interested). Opinions there are my own and does not represent the one from my
employer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com&quot;&gt;Amazon&lt;/a&gt; is a major tech company and 
is a leader in many domains, which gives a lot of jobs opportunities (like working on Cloud Computing via &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Amazon
Web Services&lt;/a&gt;, Retail via
&lt;a href=&quot;http://www.amazon.com&quot;&gt;Amazon.com&lt;/a&gt; or Virtual Assistant via
&lt;a href=&quot;http://alexa.amazon.com]&quot;&gt;Alexa&lt;/a&gt;. Thousands of people want to work there
and the interview is &lt;strong&gt;hard&lt;/strong&gt;.
This is very common to find people frustrated because they have been rejected,
like this on &lt;a href=&quot;http://www.quora.com&quot;&gt;Quora&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview-rejection.png&quot; alt=&quot;Interview Rejection Post on Quora&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The interview is hard and even if you &lt;em&gt;think&lt;/em&gt; you did great, you probably did not. 
&lt;strong&gt;Reality check&lt;/strong&gt;: this is really hard to get another perspective (see pic below). And unfortunately,
we probably do not perform as good as we think most of the time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rhino.jpg&quot; alt=&quot;Rhino&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a senior SDE working there, I wanted to share some advices on how to prepare
for your interview. These advices are mine and are limited to my knowledge and experience.
Do not consider them as the only good practices, these are just my perspective (see pic above).&lt;/p&gt;

&lt;h1 id=&quot;demystify-the-interview&quot;&gt;Demystify the interview&lt;/h1&gt;
&lt;p&gt;First of all, do not focus too much on the outcome on the interview. Hope and shoot for the best
but keep in mind it might not happen.&lt;/p&gt;

&lt;p&gt;Interviewing is like dating. You prepare, you try to be at your best and you will be
stressed. This shows that you care about the job. But if it does not work out, no worries, 
there are plenty of fish in the sea. But if it works, you do not have
to seal the deal right away: a company that is rejected by a candidate is likely to come back later.&lt;/p&gt;

&lt;p&gt;But first thing first, you &lt;strong&gt;have to be prepared&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;work-on-coding-know-your-basics&quot;&gt;Work on coding. Know your basics&lt;/h1&gt;
&lt;p&gt;The general advice, no matter the tech company is to know your basics:
algorithms, data structure, complexity, you &lt;strong&gt;have to know&lt;/strong&gt; these topics.
If you do not know, do not even go and try, you will waste your time.&lt;/p&gt;

&lt;p&gt;I would advice to read at list two books:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://elementsofprogramminginterviews.com/&quot;&gt;Elements of Programming Interviews&lt;/a&gt;: the most complete
 resource to be prepared for algorithmic, design and other technical aspects&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the Code Interview&lt;/a&gt;: a
 good second book that explains also what to expect during the interview.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you think you already know your basics and you do not need this, think twice.
Reading &lt;em&gt;Elements of Programming Interviews&lt;/em&gt; will definitively refresh your skills.&lt;/p&gt;

&lt;p&gt;You can also go for a mock interview, a coding bootcamp. Whatever. Be ready to write
code on whiteboard and answer to some basic questions.&lt;/p&gt;

&lt;h1 id=&quot;know-the-leadership-principles-&quot;&gt;Know the leadership principles …&lt;/h1&gt;
&lt;p&gt;Technical (coding/system design) skills constitute 100% of a hiring decision. The other 100% is guided
by the leadership principles. The ratio might be be accurate (no kidding!), but what I want to highlight there
is that most books and advices do not dive deep on this topic while this is very important. Knowing
the leadership principles shows your culture fit and your understanding of the company principles. If you do not know them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Right.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.jobs/principles&quot;&gt;https://www.amazon.jobs/principles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn and show you understand them. Connect your own experience with these principles.
Explain how you apply &lt;em&gt;customer obsession&lt;/em&gt;, &lt;em&gt;frugality&lt;/em&gt;, &lt;em&gt;bias for action&lt;/em&gt; or &lt;em&gt;learn and be curious&lt;/em&gt; in your
actual job. Doing this will prepare you for your interview.&lt;/p&gt;

&lt;p&gt;This is an important part of an interview because these principles
drive our work every day in the company. &lt;strong&gt;Showing that you
understand and follow these principles is key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, do not make up stories, &lt;strong&gt;be sincere, real&lt;/strong&gt;. If you do not know something, say it
and ask for more clarifications or to have another question to evaluate you. This is very easy for an interviewer
to see when somebody is making up a story.&lt;/p&gt;

&lt;h2 id=&quot;-and-do-basic-search-about-the-company&quot;&gt;… and do basic search about the company&lt;/h2&gt;

&lt;p&gt;Learn about the job and do some research about the division you are interviewing for (lab126, AWS, etc.).
Know the products they are developing. This will show you are interested about the job and you care about it.
Do not overdo it, just know the basic information: products, target, overall development plan, major leaders, etc.&lt;/p&gt;

&lt;h1 id=&quot;practice-a-lot&quot;&gt;Practice a lot&lt;/h1&gt;

&lt;p&gt;Practice, every day. Start with practicing on &lt;a href=&quot;http://www.leetcode.com&quot;&gt;leetcode&lt;/a&gt;, &lt;a href=&quot;http://www.geeksforgeeks.org/&quot;&gt;geeksforgeeks&lt;/a&gt; or any other
online coding site. Solve at least 4 problems a day (for example, 2 in the
morning, 2 in the evening). Make sure you solved at least 4 to 5 problems in
every category (arrays, tree, linked-list, etc.) before scheduling any interview
(even a mock).&lt;/p&gt;

&lt;p&gt;Buy a &lt;a href=&quot;https://www.amazon.com/Lifetree-Stick-Message-Sticker-78-7-Inch/dp/B015O5QOY6/ref=sr_1_3?ie=UTF8&amp;amp;qid=1500784523&amp;amp;sr=8-3&amp;amp;keywords=whiteboard+sticker&quot;&gt;whiteboard&lt;/a&gt;.
It costs nothing (~$10) and will help you to practice in real conditions.&lt;/p&gt;

&lt;p&gt;Do not bother having a coach. This is non-sense, a waste of time and money.
Just work hard, every day for several weeks in a row. Stop coding on your
computer and switch to the whiteboard exclusively.&lt;/p&gt;

&lt;h1 id=&quot;go-out-and-interview-periodically&quot;&gt;Go out and interview periodically&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Interviewing is like a muscle&lt;/strong&gt;: you need to practice so that you do not loose your
ability to interview. Even if you are at your dream job today, continue
to practice to keep it strong. This is very important to keep this ability up and
running. You can do that in different ways: you can either practice with a
friend or just apply to positions to evaluate yourself.&lt;/p&gt;

&lt;p&gt;Remember, interviewing is like dating, you can go interview but &lt;em&gt;do not have
to&lt;/em&gt; accept any offer. If you refuse, the other party will contact
you later to check what you are up to. And even if you refuse it, 
having a nice offer will boost your ego and give your value
on the market (always good to take!).&lt;/p&gt;

&lt;h1 id=&quot;same-player-try-again&quot;&gt;Same player, try again&lt;/h1&gt;

&lt;p&gt;Even if you prepare at your best, there is still a chance you will not be
selected. There are many reasons a candidate will not receive an offer. Your
goal is to be prepared at best to reduce the probably of being rejected.
But it can happen for various reasons. &lt;strong&gt;And that is ok&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Do not take this personal. Consider this as a learning opportunity to
improve and re-apply few months after. After few days, you will know where you
probably made a mistake and can work on improving. The process is generally
oriented towards false positive, this is why recruiters will probably re-contact
after a few months to re-apply.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Jul 2017 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/amazon/techjob/interview/2017/07/21/how-to-prepare-for-an-interview-at-amazon/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/amazon/techjob/interview/2017/07/21/how-to-prepare-for-an-interview-at-amazon/</guid>
        
        <category>amazon</category>
        
        <category>interview</category>
        
        
        <category>amazon</category>
        
        <category>techjob</category>
        
        <category>interview</category>
        
      </item>
    
      <item>
        <title>AADL In Practice is OUT!</title>
        <description>&lt;p&gt;After more than 4 months of intense work, I am happy to announce that my first book, &lt;em&gt;AADL In Practice&lt;/em&gt;
is now available online! The book is a guide to walk you through the AADL language, explains its syntax
and semantics and helps you to extend it for your own needs. All of this for $4.99.&lt;/p&gt;

&lt;p&gt;This is a nice way to give back to the AADL community and close a chapter of the research work I started
almost 10 years ago. I wanted to make my research work available. Not having these expensives books about
complicated stuff. I wanted to do something simple, quick. Something most of engineers can understand
and reuse for their own needs. I hope this will be useful for the software engineering community.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/dp/B071WHRJY3&quot;&gt;Amazon e-book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.aadl-book.com&quot;&gt;Book website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/aadlinpractice/&quot;&gt;Like the book on facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/dp/B071WHRJY3&quot;&gt;&lt;img src=&quot;/assets/aadl-book-3d.jpg&quot; alt=&quot;AADL In Practice&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 03 Jun 2017 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/architecture/modeling/2017/06/03/aadl-book/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/architecture/modeling/2017/06/03/aadl-book/</guid>
        
        <category>aadl</category>
        
        <category>modeling</category>
        
        
        <category>architecture</category>
        
        <category>modeling</category>
        
      </item>
    
      <item>
        <title>Why using asynchronous communications?</title>
        <description>&lt;p&gt;&lt;strong&gt;TL;DR: this blog post explains the status of async communications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It all started when I watched a video online:
&lt;a href=&quot;https://www.youtube.com/watch?v=gaOa-Dsbb4o&quot;&gt;Scaling Server Software at Facebook&lt;/a&gt;. The video
gives interesting details used at facebook to optimize their systems. One of the big advice (among many others)
is to use asynchronous communications. I wanted see the benefit of using
asynchronous communication and how it compares with the traditional synchronous model.&lt;/p&gt;

&lt;p&gt;This blog post explains first the different between synchronuous and asynchronuous I/O,
presents the programming models and gives some rough estimates of what you can expect.
If you develop a massive ditributed system, you cannot avoid asynchronuous communications.&lt;/p&gt;

&lt;h1 id=&quot;synchronous-vs-asynchronous-io&quot;&gt;Synchronous vs. asynchronous I/O&lt;/h1&gt;

&lt;p&gt;Let’s first start by explaining what is the difference between synchronous and asynchronuous
communications. A distributed application communicate by performing I/Os (Input/Output). It can
be network communications (socket), reading/writing into a file, etc.
In the &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix&quot;&gt;UNIX&lt;/a&gt;/
&lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX&quot;&gt;POSIX&lt;/a&gt; world, I/O are performed
on file descriptors (FDs): when you open a file or a network communication,
you open a file descriptor and can then perform &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; operations on it.&lt;/p&gt;

&lt;p&gt;You have two ways to perform I/Os: &lt;strong&gt;synchronously&lt;/strong&gt; and &lt;strong&gt;asynchronously&lt;/strong&gt;. When using
&lt;strong&gt;synchronous&lt;/strong&gt; I/O, the caller is block until the call succeeds. When using &lt;strong&gt;asynchronuous&lt;/strong&gt;, you
are periodically checking if there is anything received. The next sections details these two worlds.&lt;/p&gt;

&lt;h2 id=&quot;the-synchronous-world&quot;&gt;The synchronous world&lt;/h2&gt;

&lt;p&gt;In the synchronous world, you wait for a reply. For example, if you call &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; on a network socket,
your current program will wait until some data is available.&lt;/p&gt;

&lt;p&gt;This communication pattern is very similar to a phone conversation: you talk first and then, wait for
a reply from the other side.&lt;/p&gt;

&lt;p&gt;Synchronous communication are very sequential. Most of the time, you perform a
series of operations as follow:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Open the communication channel (e.g. take your phone and dial your friend)&lt;/li&gt;
  &lt;li&gt;Do several exchanges (e.g. each person talks and wait for the answer of the other person)&lt;/li&gt;
  &lt;li&gt;Close the communication channel (hangup)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This model is fine when you have one communication happenning. The problem is when your application
is massively distributed and communicate with a lot of peers. In that case, you need
to have N tasks (also called &lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX_Threads&quot;&gt;threads&lt;/a&gt;) and each one
will take care of communicating with one peer.&lt;/p&gt;

&lt;p&gt;The following pseudo-code shows a very common way to implement such a system: create a threads for
each request and let it handle one communication.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wait_for_reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process_reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NREQUESTS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create_thread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NREQUESTS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wait_for_thread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The execution diagram is as follow: the main thread creates one thread for each communication patterns
and wait that all of them finish their work. In that model, the operating system schedules the threads and activates them
when the data is available, adding more data structure into the kernel.&lt;/p&gt;

&lt;p&gt;One can note that after sending the request, a thread is waiting for the reply, doing nothing but waiting
for incoming communication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/communication-threads.png&quot; alt=&quot;Communication with threads&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-asynchronous-world&quot;&gt;The asynchronous world&lt;/h2&gt;

&lt;p&gt;In the asynchronous world, the program &lt;strong&gt;post&lt;/strong&gt; operations and check the result later.
This communication model is similar to text messages: you send a text but does not wait for an immediate
return, the reply may arrive now or hours later. The key here: you do not have to stay on the line
and wait for a reply, you can check it later.&lt;/p&gt;

&lt;p&gt;Asynchronous communication are not sequential at all. In fact, you send
some information (text messages) and then, there is a main loop
that receives replies and write back according to a protocol.&lt;/p&gt;

&lt;p&gt;There is no need for additional task in that model, you can handle all
of them in the main task. The hard part is to follow the status of
each operation.&lt;/p&gt;

&lt;p&gt;The following pseudo-code shows a common approach to do asynchronuous
communication. The most important aspect of the main loop that handles
new events.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTHREADS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NREQUESTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_for_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The following diagram shows an execution trace of asynchronuous communication.
There is no new task, the main tasks posts all operations to do
in the beginning and check their status. Once all operations returned, the program
is complete. Note that replies are not coming back in a specific order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/communication-nothread.png&quot; alt=&quot;Communication with threads&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-using-asynchronous-communications&quot;&gt;Why using asynchronous communications?&lt;/h1&gt;

&lt;p&gt;There are two majors issues with synchronous communication:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Lot of time of threads consists of waiting for I/O completion. It is a waste of resources&lt;/li&gt;
  &lt;li&gt;It introduces overhead, especially in the kernel for managing/scheduling/dispatching resources.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By using asynchronuous communication, you just avoid resources waste and then, can
process more requests with the same hardware. If your system is massively distributed, 
and handles thousands of simultaneous connections it will
either (1) saves resources or (2) process more requests.&lt;/p&gt;

&lt;p&gt;If you are not convinced, I suggest watching
the video &lt;a href=&quot;https://www.youtube.com/watch?v=gaOa-Dsbb4o&quot;&gt;Scaling Server Software at Facebook&lt;/a&gt;, 
a simple 5% of memory or processor usage reduction means savings in the scale of thousands
or millions of dollars. There are more information about asynchronous communication 
use at facebook on &lt;a href=&quot;https://code.facebook.com/posts/1661982097368498&quot;&gt;their blog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To summarize, using synchronous programming is easily and straightforward
but does not scale for massively large, distributed system. Asynchronous
programming makes your progrma more complex but avoid bottlenecks and resources
overhead.&lt;/p&gt;

&lt;h1 id=&quot;comparing-sync-and-async-performance&quot;&gt;Comparing sync and async performance&lt;/h1&gt;

&lt;p&gt;In order to evaluate the performance difference between synchronous and asynchronous
communications, I wrote a small client program that starts N connections
to a server and print the result. Basically, the program initiates a fixed number (N) of HTTP connections
to a web server, get a page and prints it on the standard output. I wrote two variants of the program:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Synchronous&lt;/strong&gt;: each connection is using a thread that opens a socket, write the request and print the result. There are then N threads, N being the number of connections.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;: the main program opens N sockets and handle them in a main control loop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to verify that each program retrieves the same thing (e.g. they return the same output), I log the output in a file and compares the file with diff.
Results were the same.&lt;/p&gt;

&lt;p&gt;I ran the tests on the following configuration&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Linux kernel 4.9&lt;/li&gt;
  &lt;li&gt;CPU Intel(R) Core(TM) i5-3320M CPU @ 2.60GHz&lt;/li&gt;
  &lt;li&gt;8GB RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, to remove the variability factor of the latency, all requests are issued to a local host.
I started by just running the program and vary the number of connections issued to see 
I then varied the number of concurrent connections between 1 and 100 and capture the system time used.
The system time is the time spent in kernel mode. It is clear that when using threads, there is an overhead
of resources management for the kernel.&lt;/p&gt;

&lt;p&gt;The following picture show the time spent in kernel mode for each version of the program (X=#connections and Y=time spent in kernel mode).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/async-evaluation-results.png&quot; alt=&quot;Time spent in kernel mode (X=#connections ; Y=time in kernel mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These results are very limited - this is done on a single host that communicates with only another machine without additional load.
One can expect more impact when using threads, especially when using locks/mutexes with more load.&lt;/p&gt;

&lt;h1 id=&quot;a-note-on-posix-async&quot;&gt;A note on POSIX async&lt;/h1&gt;
&lt;p&gt;When starting this work, I was looking for &lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX&quot;&gt;POSIX&lt;/a&gt; functions to perform async communications.
As POSIX is the reference for programming on UNIX system, this was natural to look how it handles
asynchronuous communications. Unfortunately, the asynchronuous API is a real disaster, in terms of its
definition (for example, it uses threads or signals to handle incoming data - something to just avoid)
or implementation (done in userland in Linux, which leads to poor performance).&lt;/p&gt;

&lt;p&gt;Other people &lt;a href=&quot;http://davmac.org/davpage/linux/async-io.html&quot;&gt;also reported&lt;/a&gt; also discusses this.
I have no idea why the current POSIX async API is so bad and why they published such a useless framework: the
notification mechanism (signals or threads) is inefficient, counter-productive and counter-intuitive.
I have no idea what the POSIX committee members were smoking the day they approved this.&lt;/p&gt;

&lt;p&gt;The result is that today, each UNIX has now its own implementation of asynchronous communication management
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Epoll&quot;&gt;epoll for linux&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Kqueue&quot;&gt;kqueue for BSD&lt;/a&gt;
leaving developers with no option than developing non-portable code.&lt;/p&gt;

&lt;h1 id=&quot;where-you-go-from-there&quot;&gt;Where you go from there?&lt;/h1&gt;
&lt;p&gt;No question about it, asynchronous communications are definitively the way
to go if you are developing a massive distributed system.&lt;/p&gt;

&lt;p&gt;So how to use asynchronous communication effectively with your favorite programming language?
There are multiple frameworks available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For C++, &lt;a href=&quot;http://www.boost.org/&quot;&gt;boost&lt;/a&gt; includes asynchronous communication functions&lt;/li&gt;
  &lt;li&gt;For Python &amp;gt;3.4, the &lt;a href=&quot;https://docs.python.org/3/library/asyncio.html#module-asyncio&quot;&gt;asyncio&lt;/a&gt; framework
provides everything you need to manage asynchronous communication&lt;/li&gt;
  &lt;li&gt;For Python &amp;lt;3.4, you have existing framework as detailed in &lt;a href=&quot;https://thehackerguidetopython.com/&quot;&gt;The Hacker’s guide to Python&lt;/a&gt; - you can also learn more in this &lt;a href=&quot;https://www.youtube.com/watch?v=7sCu4gEjH5I&quot;&gt;youtube video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For pure C on linux, use directly &lt;a href=&quot;https://en.wikipedia.org/wiki/Epoll&quot;&gt;epoll&lt;/a&gt;. This is not portable to any other UNIX but I bet you might not migrate to any other system now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code used for evaluate sync/async performance is &lt;a href=&quot;https://github.com/juli1/async-study&quot;&gt;available online&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Apr 2017 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/programming/linux/2017/04/15/comparison-sync-vs-async/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/programming/linux/2017/04/15/comparison-sync-vs-async/</guid>
        
        <category>epoll</category>
        
        <category>linux</category>
        
        <category>sync</category>
        
        <category>async</category>
        
        
        <category>programming</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Goodbye CMU-SEI, welcome Amazon!</title>
        <description>&lt;p&gt;I was definitively not planning to move away from Pittsburgh but I am now
leaving the &lt;a href=&quot;http://sei.cmu.edu&quot;&gt;Carnegie Mellon Software Engineering Institute&lt;/a&gt; to join the &lt;a href=&quot;http://aws.amazon.com&quot;&gt;AWS&lt;/a&gt; team
in Seattle. In case you never heard of it, &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Amazon Web Services&lt;/a&gt; is the leader 
of cloud-computing services and is used by many companies all over the world. You can read
more on &lt;a href=&quot;https://en.wikipedia.org/wiki/Amazon_Web_Services&quot;&gt;wikipedia there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pittsburgh has been the city where my American journey started. It has been exciting to work at CMU-SEI and I 
met a lot of wonderful people in the city. I am really happy and excited to
start a new chapter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay Hungry!&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 06 Jan 2017 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/geek/amazon/seattle/pittsburgh/2017/01/06/goodbye-cmu-sei-hello-amazon/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/geek/amazon/seattle/pittsburgh/2017/01/06/goodbye-cmu-sei-hello-amazon/</guid>
        
        <category>Amazon</category>
        
        <category>CMU-SEI</category>
        
        <category>Software Engineering Institute</category>
        
        
        <category>geek</category>
        
        <category>amazon</category>
        
        <category>Seattle</category>
        
        <category>Pittsburgh</category>
        
      </item>
    
  </channel>
</rss>
